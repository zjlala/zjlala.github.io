{"version":3,"file":"node.cjs","sources":["../src/nextTick/node.ts","../src/constant.ts","../src/base64.ts","../src/crypt.ts","../src/random/node.ts","../src/utils.ts","../src/salt.ts","../src/uft8.ts","../src/hash.ts","../src/compare.ts","../src/helpers.ts"],"sourcesContent":["/**\n * @private\n *\n * Continues with the callback on the next tick.\n */\nexport const nextTick: (callback: () => void) => void =\n  process.env.NEXT_RUNTIME === \"edge\"\n    ? /* istanbul ignore next -- @preserve */\n      setTimeout\n    : setImmediate;\n","export const BCRYPT_SALT_LEN = 16;\n\nexport const GENERATE_SALT_DEFAULT_LOG2_ROUNDS = 10;\n\nexport const BLOWFISH_NUM_ROUNDS = 16;\n\nexport const MAX_EXECUTION_TIME = 100;\n\nexport const BASE64_CODE =\n  \"./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\".split(\"\");\n\nexport const BASE64_INDEX = [\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,\n  -1, -1, -1, -1, -1, -1, -1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, -1, -1, -1, -1, -1, -1, 28,\n  29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n  48, 49, 50, 51, 52, 53, -1, -1, -1, -1, -1,\n];\n\nexport const P_ORIG = [\n  0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822, 0x299f31d0,\n  0x082efa98, 0xec4e6c89, 0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c,\n  0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470917, 0x9216d5d9, 0x8979fb1b,\n];\n\nexport const S_ORIG = [\n  0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7, 0xb8e1afed, 0x6a267e96,\n  0xba7c9045, 0xf12c7f99, 0x24a19947, 0xb3916cf7, 0x0801f2e2, 0x858efc16,\n  0x636920d8, 0x71574e69, 0xa458fea3, 0xf4933d7e, 0x0d95748f, 0x728eb658,\n  0x718bcd58, 0x82154aee, 0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af26013,\n  0xc5d1b023, 0x286085f0, 0xca417918, 0xb8db38ef, 0x8e79dcb0, 0x603a180e,\n  0x6c9e0e8b, 0xb01e8a3e, 0xd71577c1, 0xbd314b27, 0x78af2fda, 0x55605c60,\n  0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440, 0x55ca396a, 0x2aab10b6,\n  0xb4cc5c34, 0x1141e8ce, 0xa15486af, 0x7c72e993, 0xb3ee1411, 0x636fbc2a,\n  0x2ba9c55d, 0x741831f6, 0xce5c3e16, 0x9b87931e, 0xafd6ba33, 0x6c24cf5c,\n  0x7a325381, 0x28958677, 0x3b8f4898, 0x6b4bb9af, 0xc4bfe81b, 0x66282193,\n  0x61d809cc, 0xfb21a991, 0x487cac60, 0x5dec8032, 0xef845d5d, 0xe98575b1,\n  0xdc262302, 0xeb651b88, 0x23893e81, 0xd396acc5, 0x0f6d6ff3, 0x83f44239,\n  0x2e0b4482, 0xa4842004, 0x69c8f04a, 0x9e1f9b5e, 0x21c66842, 0xf6e96c9a,\n  0x670c9c61, 0xabd388f0, 0x6a51a0d2, 0xd8542f68, 0x960fa728, 0xab5133a3,\n  0x6eef0b6c, 0x137a3be4, 0xba3bf050, 0x7efb2a98, 0xa1f1651d, 0x39af0176,\n  0x66ca593e, 0x82430e88, 0x8cee8619, 0x456f9fb4, 0x7d84a5c3, 0x3b8b5ebe,\n  0xe06f75d8, 0x85c12073, 0x401a449f, 0x56c16aa6, 0x4ed3aa62, 0x363f7706,\n  0x1bfedf72, 0x429b023d, 0x37d0d724, 0xd00a1248, 0xdb0fead3, 0x49f1c09b,\n  0x075372c9, 0x80991b7b, 0x25d479d8, 0xf6e8def7, 0xe3fe501a, 0xb6794c3b,\n  0x976ce0bd, 0x04c006ba, 0xc1a94fb6, 0x409f60c4, 0x5e5c9ec2, 0x196a2463,\n  0x68fb6faf, 0x3e6c53b5, 0x1339b2eb, 0x3b52ec6f, 0x6dfc511f, 0x9b30952c,\n  0xcc814544, 0xaf5ebd09, 0xbee3d004, 0xde334afd, 0x660f2807, 0x192e4bb3,\n  0xc0cba857, 0x45c8740f, 0xd20b5f39, 0xb9d3fbdb, 0x5579c0bd, 0x1a60320a,\n  0xd6a100c6, 0x402c7279, 0x679f25fe, 0xfb1fa3cc, 0x8ea5e9f8, 0xdb3222f8,\n  0x3c7516df, 0xfd616b15, 0x2f501ec8, 0xad0552ab, 0x323db5fa, 0xfd238760,\n  0x53317b48, 0x3e00df82, 0x9e5c57bb, 0xca6f8ca0, 0x1a87562e, 0xdf1769db,\n  0xd542a8f6, 0x287effc3, 0xac6732c6, 0x8c4f5573, 0x695b27b0, 0xbbca58c8,\n  0xe1ffa35d, 0xb8f011a0, 0x10fa3d98, 0xfd2183b8, 0x4afcb56c, 0x2dd1d35b,\n  0x9a53e479, 0xb6f84565, 0xd28e49bc, 0x4bfb9790, 0xe1ddf2da, 0xa4cb7e33,\n  0x62fb1341, 0xcee4c6e8, 0xef20cada, 0x36774c01, 0xd07e9efe, 0x2bf11fb4,\n  0x95dbda4d, 0xae909198, 0xeaad8e71, 0x6b93d5a0, 0xd08ed1d0, 0xafc725e0,\n  0x8e3c5b2f, 0x8e7594b7, 0x8ff6e2fb, 0xf2122b64, 0x8888b812, 0x900df01c,\n  0x4fad5ea0, 0x688fc31c, 0xd1cff191, 0xb3a8c1ad, 0x2f2f2218, 0xbe0e1777,\n  0xea752dfe, 0x8b021fa1, 0xe5a0cc0f, 0xb56f74e8, 0x18acf3d6, 0xce89e299,\n  0xb4a84fe0, 0xfd13e0b7, 0x7cc43b81, 0xd2ada8d9, 0x165fa266, 0x80957705,\n  0x93cc7314, 0x211a1477, 0xe6ad2065, 0x77b5fa86, 0xc75442f5, 0xfb9d35cf,\n  0xebcdaf0c, 0x7b3e89a0, 0xd6411bd3, 0xae1e7e49, 0x00250e2d, 0x2071b35e,\n  0x226800bb, 0x57b8e0af, 0x2464369b, 0xf009b91e, 0x5563911d, 0x59dfa6aa,\n  0x78c14389, 0xd95a537f, 0x207d5ba2, 0x02e5b9c5, 0x83260376, 0x6295cfa9,\n  0x11c81968, 0x4e734a41, 0xb3472dca, 0x7b14a94a, 0x1b510052, 0x9a532915,\n  0xd60f573f, 0xbc9bc6e4, 0x2b60a476, 0x81e67400, 0x08ba6fb5, 0x571be91f,\n  0xf296ec6b, 0x2a0dd915, 0xb6636521, 0xe7b9f9b6, 0xff34052e, 0xc5855664,\n  0x53b02d5d, 0xa99f8fa1, 0x08ba4799, 0x6e85076a, 0x4b7a70e9, 0xb5b32944,\n  0xdb75092e, 0xc4192623, 0xad6ea6b0, 0x49a7df7d, 0x9cee60b8, 0x8fedb266,\n  0xecaa8c71, 0x699a17ff, 0x5664526c, 0xc2b19ee1, 0x193602a5, 0x75094c29,\n  0xa0591340, 0xe4183a3e, 0x3f54989a, 0x5b429d65, 0x6b8fe4d6, 0x99f73fd6,\n  0xa1d29c07, 0xefe830f5, 0x4d2d38e6, 0xf0255dc1, 0x4cdd2086, 0x8470eb26,\n  0x6382e9c6, 0x021ecc5e, 0x09686b3f, 0x3ebaefc9, 0x3c971814, 0x6b6a70a1,\n  0x687f3584, 0x52a0e286, 0xb79c5305, 0xaa500737, 0x3e07841c, 0x7fdeae5c,\n  0x8e7d44ec, 0x5716f2b8, 0xb03ada37, 0xf0500c0d, 0xf01c1f04, 0x0200b3ff,\n  0xae0cf51a, 0x3cb574b2, 0x25837a58, 0xdc0921bd, 0xd19113f9, 0x7ca92ff6,\n  0x94324773, 0x22f54701, 0x3ae5e581, 0x37c2dadc, 0xc8b57634, 0x9af3dda7,\n  0xa9446146, 0x0fd0030e, 0xecc8c73e, 0xa4751e41, 0xe238cd99, 0x3bea0e2f,\n  0x3280bba1, 0x183eb331, 0x4e548b38, 0x4f6db908, 0x6f420d03, 0xf60a04bf,\n  0x2cb81290, 0x24977c79, 0x5679b072, 0xbcaf89af, 0xde9a771f, 0xd9930810,\n  0xb38bae12, 0xdccf3f2e, 0x5512721f, 0x2e6b7124, 0x501adde6, 0x9f84cd87,\n  0x7a584718, 0x7408da17, 0xbc9f9abc, 0xe94b7d8c, 0xec7aec3a, 0xdb851dfa,\n  0x63094366, 0xc464c3d2, 0xef1c1847, 0x3215d908, 0xdd433b37, 0x24c2ba16,\n  0x12a14d43, 0x2a65c451, 0x50940002, 0x133ae4dd, 0x71dff89e, 0x10314e55,\n  0x81ac77d6, 0x5f11199b, 0x043556f1, 0xd7a3c76b, 0x3c11183b, 0x5924a509,\n  0xf28fe6ed, 0x97f1fbfa, 0x9ebabf2c, 0x1e153c6e, 0x86e34570, 0xeae96fb1,\n  0x860e5e0a, 0x5a3e2ab3, 0x771fe71c, 0x4e3d06fa, 0x2965dcb9, 0x99e71d0f,\n  0x803e89d6, 0x5266c825, 0x2e4cc978, 0x9c10b36a, 0xc6150eba, 0x94e2ea78,\n  0xa5fc3c53, 0x1e0a2df4, 0xf2f74ea7, 0x361d2b3d, 0x1939260f, 0x19c27960,\n  0x5223a708, 0xf71312b6, 0xebadfe6e, 0xeac31f66, 0xe3bc4595, 0xa67bc883,\n  0xb17f37d1, 0x018cff28, 0xc332ddef, 0xbe6c5aa5, 0x65582185, 0x68ab9802,\n  0xeecea50f, 0xdb2f953b, 0x2aef7dad, 0x5b6e2f84, 0x1521b628, 0x29076170,\n  0xecdd4775, 0x619f1510, 0x13cca830, 0xeb61bd96, 0x0334fe1e, 0xaa0363cf,\n  0xb5735c90, 0x4c70a239, 0xd59e9e0b, 0xcbaade14, 0xeecc86bc, 0x60622ca7,\n  0x9cab5cab, 0xb2f3846e, 0x648b1eaf, 0x19bdf0ca, 0xa02369b9, 0x655abb50,\n  0x40685a32, 0x3c2ab4b3, 0x319ee9d5, 0xc021b8f7, 0x9b540b19, 0x875fa099,\n  0x95f7997e, 0x623d7da8, 0xf837889a, 0x97e32d77, 0x11ed935f, 0x16681281,\n  0x0e358829, 0xc7e61fd6, 0x96dedfa1, 0x7858ba99, 0x57f584a5, 0x1b227263,\n  0x9b83c3ff, 0x1ac24696, 0xcdb30aeb, 0x532e3054, 0x8fd948e4, 0x6dbc3128,\n  0x58ebf2ef, 0x34c6ffea, 0xfe28ed61, 0xee7c3c73, 0x5d4a14d9, 0xe864b7e3,\n  0x42105d14, 0x203e13e0, 0x45eee2b6, 0xa3aaabea, 0xdb6c4f15, 0xfacb4fd0,\n  0xc742f442, 0xef6abbb5, 0x654f3b1d, 0x41cd2105, 0xd81e799e, 0x86854dc7,\n  0xe44b476a, 0x3d816250, 0xcf62a1f2, 0x5b8d2646, 0xfc8883a0, 0xc1c7b6a3,\n  0x7f1524c3, 0x69cb7492, 0x47848a0b, 0x5692b285, 0x095bbf00, 0xad19489d,\n  0x1462b174, 0x23820e00, 0x58428d2a, 0x0c55f5ea, 0x1dadf43e, 0x233f7061,\n  0x3372f092, 0x8d937e41, 0xd65fecf1, 0x6c223bdb, 0x7cde3759, 0xcbee7460,\n  0x4085f2a7, 0xce77326e, 0xa6078084, 0x19f8509e, 0xe8efd855, 0x61d99735,\n  0xa969a7aa, 0xc50c06c2, 0x5a04abfc, 0x800bcadc, 0x9e447a2e, 0xc3453484,\n  0xfdd56705, 0x0e1e9ec9, 0xdb73dbd3, 0x105588cd, 0x675fda79, 0xe3674340,\n  0xc5c43465, 0x713e38d8, 0x3d28f89e, 0xf16dff20, 0x153e21e7, 0x8fb03d4a,\n  0xe6e39f2b, 0xdb83adf7, 0xe93d5a68, 0x948140f7, 0xf64c261c, 0x94692934,\n  0x411520f7, 0x7602d4f7, 0xbcf46b2e, 0xd4a20068, 0xd4082471, 0x3320f46a,\n  0x43b7d4b7, 0x500061af, 0x1e39f62e, 0x97244546, 0x14214f74, 0xbf8b8840,\n  0x4d95fc1d, 0x96b591af, 0x70f4ddd3, 0x66a02f45, 0xbfbc09ec, 0x03bd9785,\n  0x7fac6dd0, 0x31cb8504, 0x96eb27b3, 0x55fd3941, 0xda2547e6, 0xabca0a9a,\n  0x28507825, 0x530429f4, 0x0a2c86da, 0xe9b66dfb, 0x68dc1462, 0xd7486900,\n  0x680ec0a4, 0x27a18dee, 0x4f3ffea2, 0xe887ad8c, 0xb58ce006, 0x7af4d6b6,\n  0xaace1e7c, 0xd3375fec, 0xce78a399, 0x406b2a42, 0x20fe9e35, 0xd9f385b9,\n  0xee39d7ab, 0x3b124e8b, 0x1dc9faf7, 0x4b6d1856, 0x26a36631, 0xeae397b2,\n  0x3a6efa74, 0xdd5b4332, 0x6841e7f7, 0xca7820fb, 0xfb0af54e, 0xd8feb397,\n  0x454056ac, 0xba489527, 0x55533a3a, 0x20838d87, 0xfe6ba9b7, 0xd096954b,\n  0x55a867bc, 0xa1159a58, 0xcca92963, 0x99e1db33, 0xa62a4a56, 0x3f3125f9,\n  0x5ef47e1c, 0x9029317c, 0xfdf8e802, 0x04272f70, 0x80bb155c, 0x05282ce3,\n  0x95c11548, 0xe4c66d22, 0x48c1133f, 0xc70f86dc, 0x07f9c9ee, 0x41041f0f,\n  0x404779a4, 0x5d886e17, 0x325f51eb, 0xd59bc0d1, 0xf2bcc18f, 0x41113564,\n  0x257b7834, 0x602a9c60, 0xdff8e8a3, 0x1f636c1b, 0x0e12b4c2, 0x02e1329e,\n  0xaf664fd1, 0xcad18115, 0x6b2395e0, 0x333e92e1, 0x3b240b62, 0xeebeb922,\n  0x85b2a20e, 0xe6ba0d99, 0xde720c8c, 0x2da2f728, 0xd0127845, 0x95b794fd,\n  0x647d0862, 0xe7ccf5f0, 0x5449a36f, 0x877d48fa, 0xc39dfd27, 0xf33e8d1e,\n  0x0a476341, 0x992eff74, 0x3a6f6eab, 0xf4f8fd37, 0xa812dc60, 0xa1ebddf8,\n  0x991be14c, 0xdb6e6b0d, 0xc67b5510, 0x6d672c37, 0x2765d43b, 0xdcd0e804,\n  0xf1290dc7, 0xcc00ffa3, 0xb5390f92, 0x690fed0b, 0x667b9ffb, 0xcedb7d9c,\n  0xa091cf0b, 0xd9155ea3, 0xbb132f88, 0x515bad24, 0x7b9479bf, 0x763bd6eb,\n  0x37392eb3, 0xcc115979, 0x8026e297, 0xf42e312d, 0x6842ada7, 0xc66a2b3b,\n  0x12754ccc, 0x782ef11c, 0x6a124237, 0xb79251e7, 0x06a1bbe6, 0x4bfb6350,\n  0x1a6b1018, 0x11caedfa, 0x3d25bdd8, 0xe2e1c3c9, 0x44421659, 0x0a121386,\n  0xd90cec6e, 0xd5abea2a, 0x64af674e, 0xda86a85f, 0xbebfe988, 0x64e4c3fe,\n  0x9dbc8057, 0xf0f7c086, 0x60787bf8, 0x6003604d, 0xd1fd8346, 0xf6381fb0,\n  0x7745ae04, 0xd736fccc, 0x83426b33, 0xf01eab71, 0xb0804187, 0x3c005e5f,\n  0x77a057be, 0xbde8ae24, 0x55464299, 0xbf582e61, 0x4e58f48f, 0xf2ddfda2,\n  0xf474ef38, 0x8789bdc2, 0x5366f9c3, 0xc8b38e74, 0xb475f255, 0x46fcd9b9,\n  0x7aeb2661, 0x8b1ddf84, 0x846a0e79, 0x915f95e2, 0x466e598e, 0x20b45770,\n  0x8cd55591, 0xc902de4c, 0xb90bace1, 0xbb8205d0, 0x11a86248, 0x7574a99e,\n  0xb77f19b6, 0xe0a9dc09, 0x662d09a1, 0xc4324633, 0xe85a1f02, 0x09f0be8c,\n  0x4a99a025, 0x1d6efe10, 0x1ab93d1d, 0x0ba5a4df, 0xa186f20f, 0x2868f169,\n  0xdcb7da83, 0x573906fe, 0xa1e2ce9b, 0x4fcd7f52, 0x50115e01, 0xa70683fa,\n  0xa002b5c4, 0x0de6d027, 0x9af88c27, 0x773f8641, 0xc3604c06, 0x61a806b5,\n  0xf0177a28, 0xc0f586e0, 0x006058aa, 0x30dc7d62, 0x11e69ed7, 0x2338ea63,\n  0x53c2dd94, 0xc2c21634, 0xbbcbee56, 0x90bcb6de, 0xebfc7da1, 0xce591d76,\n  0x6f05e409, 0x4b7c0188, 0x39720a3d, 0x7c927c24, 0x86e3725f, 0x724d9db9,\n  0x1ac15bb4, 0xd39eb8fc, 0xed545578, 0x08fca5b5, 0xd83d7cd3, 0x4dad0fc4,\n  0x1e50ef5e, 0xb161e6f8, 0xa28514d9, 0x6c51133c, 0x6fd5c7e7, 0x56e14ec4,\n  0x362abfce, 0xddc6c837, 0xd79a3234, 0x92638212, 0x670efa8e, 0x406000e0,\n  0x3a39ce37, 0xd3faf5cf, 0xabc27737, 0x5ac52d1b, 0x5cb0679e, 0x4fa33742,\n  0xd3822740, 0x99bc9bbe, 0xd5118e9d, 0xbf0f7315, 0xd62d1c7e, 0xc700c47b,\n  0xb78c1b6b, 0x21a19045, 0xb26eb1be, 0x6a366eb4, 0x5748ab2f, 0xbc946e79,\n  0xc6a376d2, 0x6549c2c8, 0x530ff8ee, 0x468dde7d, 0xd5730a1d, 0x4cd04dc6,\n  0x2939bbdb, 0xa9ba4650, 0xac9526e8, 0xbe5ee304, 0xa1fad5f0, 0x6a2d519a,\n  0x63ef8ce2, 0x9a86ee22, 0xc089c2b8, 0x43242ef6, 0xa51e03aa, 0x9cf2d0a4,\n  0x83c061ba, 0x9be96a4d, 0x8fe51550, 0xba645bd6, 0x2826a2f9, 0xa73a3ae1,\n  0x4ba99586, 0xef5562e9, 0xc72fefd3, 0xf752f7da, 0x3f046f69, 0x77fa0a59,\n  0x80e4a915, 0x87b08601, 0x9b09e6ad, 0x3b3ee593, 0xe990fd5a, 0x9e34d797,\n  0x2cf0b7d9, 0x022b8b51, 0x96d5ac3a, 0x017da67d, 0xd1cf3ed6, 0x7c7d2d28,\n  0x1f9f25cf, 0xadf2b89b, 0x5ad6b472, 0x5a88f54c, 0xe029ac71, 0xe019a5e6,\n  0x47b0acfd, 0xed93fa9b, 0xe8d3c48d, 0x283b57cc, 0xf8d56629, 0x79132e28,\n  0x785f0191, 0xed756055, 0xf7960e44, 0xe3d35e8c, 0x15056dd4, 0x88f46dba,\n  0x03a16125, 0x0564f0bd, 0xc3eb9e15, 0x3c9057a2, 0x97271aec, 0xa93a072a,\n  0x1b3f6d9b, 0x1e6321f5, 0xf59c66fb, 0x26dcf319, 0x7533d928, 0xb155fdf5,\n  0x03563482, 0x8aba3cbb, 0x28517711, 0xc20ad9f8, 0xabcc5167, 0xccad925f,\n  0x4de81751, 0x3830dc8e, 0x379d5862, 0x9320f991, 0xea7a90c2, 0xfb3e7bce,\n  0x5121ce64, 0x774fbe32, 0xa8b6e37e, 0xc3293d46, 0x48de5369, 0x6413e680,\n  0xa2ae0810, 0xdd6db224, 0x69852dfd, 0x09072166, 0xb39a460a, 0x6445c0dd,\n  0x586cdecf, 0x1c20c8ae, 0x5bbef7dd, 0x1b588d40, 0xccd2017f, 0x6bb4e3bb,\n  0xdda26a7e, 0x3a59ff45, 0x3e350a44, 0xbcb4cdd5, 0x72eacea8, 0xfa6484bb,\n  0x8d6612ae, 0xbf3c6f47, 0xd29be463, 0x542f5d9e, 0xaec2771b, 0xf64e6370,\n  0x740e0d8d, 0xe75b1357, 0xf8721671, 0xaf537d5d, 0x4040cb08, 0x4eb4e2cc,\n  0x34d2466a, 0x0115af84, 0xe1b00428, 0x95983a1d, 0x06b89fb4, 0xce6ea048,\n  0x6f3f3b82, 0x3520ab82, 0x011a1d4b, 0x277227f8, 0x611560b1, 0xe7933fdc,\n  0xbb3a792b, 0x344525bd, 0xa08839e1, 0x51ce794b, 0x2f32c9b7, 0xa01fbac9,\n  0xe01cc87e, 0xbcc7d1f6, 0xcf0111c3, 0xa1e8aac7, 0x1a908749, 0xd44fbd9a,\n  0xd0dadecb, 0xd50ada38, 0x0339c32a, 0xc6913667, 0x8df9317c, 0xe0b12b4f,\n  0xf79e59b7, 0x43f5bb3a, 0xf2d519ff, 0x27d9459c, 0xbf97222c, 0x15e6fc2a,\n  0x0f91fc71, 0x9b941525, 0xfae59361, 0xceb69ceb, 0xc2a86459, 0x12baa8d1,\n  0xb6c1075e, 0xe3056a0c, 0x10d25065, 0xcb03a442, 0xe0ec6e0e, 0x1698db3b,\n  0x4c98a0be, 0x3278e964, 0x9f1f9532, 0xe0d392df, 0xd3a0342b, 0x8971f21e,\n  0x1b0a7441, 0x4ba3348c, 0xc5be7120, 0xc37632d8, 0xdf359f8d, 0x9b992f2e,\n  0xe60b6f47, 0x0fe3f11d, 0xe54cda54, 0x1edad891, 0xce6279cf, 0xcd3e7e6f,\n  0x1618b166, 0xfd2c1d05, 0x848fd2c5, 0xf6fb2299, 0xf523f357, 0xa6327623,\n  0x93a83531, 0x56cccd02, 0xacf08162, 0x5a75ebb5, 0x6e163697, 0x88d273cc,\n  0xde966292, 0x81b949d0, 0x4c50901b, 0x71c65614, 0xe6c6c7bd, 0x327a140a,\n  0x45e1d006, 0xc3f27b9a, 0xc9aa53fd, 0x62a80f00, 0xbb25bfe2, 0x35bdd2f6,\n  0x71126905, 0xb2040222, 0xb6cbcf7c, 0xcd769c2b, 0x53113ec0, 0x1640e3d3,\n  0x38abbd60, 0x2547adf0, 0xba38209c, 0xf746ce76, 0x77afa1c5, 0x20756060,\n  0x85cbfe4e, 0x8ae88dd8, 0x7aaaf9b0, 0x4cf9aa7e, 0x1948c25c, 0x02fb8a8c,\n  0x01c36ae4, 0xd6ebe1f9, 0x90d4f869, 0xa65cdea0, 0x3f09252d, 0xc208e69f,\n  0xb74e6132, 0xce77e25b, 0x578fdfe3, 0x3ac372e6,\n];\n\nexport const C_ORIG = [\n  0x4f727068, 0x65616e42, 0x65686f6c, 0x64657253, 0x63727944, 0x6f756274,\n];\n","import { BASE64_CODE, BASE64_INDEX } from \"./constant.js\";\n\n/**\n * Encodes a byte array to base64 with up to length bytes of input, using the custom bcrypt alphabet.\n *\n * @param byteArray Byte array\n * @param length Maximum input length\n */\nexport const encodeBase64 = (\n  byteArray: number[] | Buffer,\n  length: number,\n): string => {\n  if (length <= 0 || length > byteArray.length)\n    throw Error(`Illegal length: ${length}`);\n\n  let off = 0;\n  let c1: number;\n  let c2: number;\n  const result: string[] = [];\n\n  while (off < length) {\n    c1 = byteArray[off++] & 0xff;\n    result.push(BASE64_CODE[(c1 >> 2) & 0x3f]);\n    c1 = (c1 & 0x03) << 4;\n    if (off >= length) {\n      result.push(BASE64_CODE[c1 & 0x3f]);\n      break;\n    }\n    c2 = byteArray[off++] & 0xff;\n    c1 |= (c2 >> 4) & 0x0f;\n    result.push(BASE64_CODE[c1 & 0x3f]);\n    c1 = (c2 & 0x0f) << 2;\n    if (off >= length) {\n      result.push(BASE64_CODE[c1 & 0x3f]);\n      break;\n    }\n    c2 = byteArray[off++] & 0xff;\n    c1 |= (c2 >> 6) & 0x03;\n    result.push(BASE64_CODE[c1 & 0x3f]);\n    result.push(BASE64_CODE[c2 & 0x3f]);\n  }\n\n  return result.join(\"\");\n};\n\n/**\n * Decodes a base64 encoded string to up to len bytes of output, using the custom bcrypt alphabet.\n *\n * @param contentString String to decode\n * @param length Maximum output length\n */\nexport const decodeBase64 = (\n  contentString: string,\n  length: number,\n): number[] => {\n  if (length <= 0) throw Error(`Illegal length: ${length}`);\n\n  const stringLength = contentString.length;\n  let off = 0;\n  let olen = 0;\n  let c1: number;\n  let c2: number;\n  let c3: number;\n  let c4: number;\n  let o: number;\n  let code: number;\n  const result: string[] = [];\n\n  while (off < stringLength - 1 && olen < length) {\n    code = contentString.charCodeAt(off++);\n    c1 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;\n    code = contentString.charCodeAt(off++);\n    c2 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;\n\n    if (c1 === -1 || c2 === -1) break;\n\n    o = (c1 << 2) >>> 0;\n    o |= (c2 & 0x30) >> 4;\n    result.push(String.fromCharCode(o));\n\n    if (++olen >= length || off >= stringLength) break;\n\n    code = contentString.charCodeAt(off++);\n    c3 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;\n    if (c3 === -1) break;\n    o = ((c2 & 0x0f) << 4) >>> 0;\n    o |= (c3 & 0x3c) >> 2;\n    result.push(String.fromCharCode(o));\n\n    if (++olen >= length || off >= stringLength) break;\n\n    code = contentString.charCodeAt(off++);\n    c4 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;\n    o = ((c3 & 0x03) << 6) >>> 0;\n    o |= c4;\n    result.push(String.fromCharCode(o));\n\n    ++olen;\n  }\n\n  return result.map((item) => item.charCodeAt(0));\n};\n","import { nextTick } from \"nextTick\";\n\nimport {\n  BLOWFISH_NUM_ROUNDS,\n  C_ORIG,\n  MAX_EXECUTION_TIME,\n  P_ORIG,\n  S_ORIG,\n} from \"./constant.js\";\n\n// A base64 implementation for the bcrypt algorithm. This is partly non-standard.\n\nconst encipher = (\n  lr: Int32Array<ArrayBuffer>,\n  off: number,\n  P: Int32Array<ArrayBuffer>,\n  S: Int32Array<ArrayBuffer>,\n): Int32Array<ArrayBuffer> => {\n  // This is our bottleneck: 1714/1905 ticks / 90% - see profile.txt\n  let n: number;\n  let l = lr[off];\n  let r = lr[off + 1];\n\n  l ^= P[0];\n\n  //The following is an unrolled version of the above loop.\n  //Iteration 0\n  n = S[l >>> 24];\n  n += S[0x100 | ((l >> 16) & 0xff)];\n  n ^= S[0x200 | ((l >> 8) & 0xff)];\n  n += S[0x300 | (l & 0xff)];\n  r ^= n ^ P[1];\n  n = S[r >>> 24];\n  n += S[0x100 | ((r >> 16) & 0xff)];\n  n ^= S[0x200 | ((r >> 8) & 0xff)];\n  n += S[0x300 | (r & 0xff)];\n  l ^= n ^ P[2];\n  //Iteration 1\n  n = S[l >>> 24];\n  n += S[0x100 | ((l >> 16) & 0xff)];\n  n ^= S[0x200 | ((l >> 8) & 0xff)];\n  n += S[0x300 | (l & 0xff)];\n  r ^= n ^ P[3];\n  n = S[r >>> 24];\n  n += S[0x100 | ((r >> 16) & 0xff)];\n  n ^= S[0x200 | ((r >> 8) & 0xff)];\n  n += S[0x300 | (r & 0xff)];\n  l ^= n ^ P[4];\n  //Iteration 2\n  n = S[l >>> 24];\n  n += S[0x100 | ((l >> 16) & 0xff)];\n  n ^= S[0x200 | ((l >> 8) & 0xff)];\n  n += S[0x300 | (l & 0xff)];\n  r ^= n ^ P[5];\n  n = S[r >>> 24];\n  n += S[0x100 | ((r >> 16) & 0xff)];\n  n ^= S[0x200 | ((r >> 8) & 0xff)];\n  n += S[0x300 | (r & 0xff)];\n  l ^= n ^ P[6];\n  //Iteration 3\n  n = S[l >>> 24];\n  n += S[0x100 | ((l >> 16) & 0xff)];\n  n ^= S[0x200 | ((l >> 8) & 0xff)];\n  n += S[0x300 | (l & 0xff)];\n  r ^= n ^ P[7];\n  n = S[r >>> 24];\n  n += S[0x100 | ((r >> 16) & 0xff)];\n  n ^= S[0x200 | ((r >> 8) & 0xff)];\n  n += S[0x300 | (r & 0xff)];\n  l ^= n ^ P[8];\n  //Iteration 4\n  n = S[l >>> 24];\n  n += S[0x100 | ((l >> 16) & 0xff)];\n  n ^= S[0x200 | ((l >> 8) & 0xff)];\n  n += S[0x300 | (l & 0xff)];\n  r ^= n ^ P[9];\n  n = S[r >>> 24];\n  n += S[0x100 | ((r >> 16) & 0xff)];\n  n ^= S[0x200 | ((r >> 8) & 0xff)];\n  n += S[0x300 | (r & 0xff)];\n  l ^= n ^ P[10];\n  //Iteration 5\n  n = S[l >>> 24];\n  n += S[0x100 | ((l >> 16) & 0xff)];\n  n ^= S[0x200 | ((l >> 8) & 0xff)];\n  n += S[0x300 | (l & 0xff)];\n  r ^= n ^ P[11];\n  n = S[r >>> 24];\n  n += S[0x100 | ((r >> 16) & 0xff)];\n  n ^= S[0x200 | ((r >> 8) & 0xff)];\n  n += S[0x300 | (r & 0xff)];\n  l ^= n ^ P[12];\n  //Iteration 6\n  n = S[l >>> 24];\n  n += S[0x100 | ((l >> 16) & 0xff)];\n  n ^= S[0x200 | ((l >> 8) & 0xff)];\n  n += S[0x300 | (l & 0xff)];\n  r ^= n ^ P[13];\n  n = S[r >>> 24];\n  n += S[0x100 | ((r >> 16) & 0xff)];\n  n ^= S[0x200 | ((r >> 8) & 0xff)];\n  n += S[0x300 | (r & 0xff)];\n  l ^= n ^ P[14];\n  //Iteration 7\n  n = S[l >>> 24];\n  n += S[0x100 | ((l >> 16) & 0xff)];\n  n ^= S[0x200 | ((l >> 8) & 0xff)];\n  n += S[0x300 | (l & 0xff)];\n  r ^= n ^ P[15];\n  n = S[r >>> 24];\n  n += S[0x100 | ((r >> 16) & 0xff)];\n  n ^= S[0x200 | ((r >> 8) & 0xff)];\n  n += S[0x300 | (r & 0xff)];\n  l ^= n ^ P[16];\n\n  lr[off] = r ^ P[BLOWFISH_NUM_ROUNDS + 1];\n  lr[off + 1] = l;\n\n  return lr;\n};\n\nconst streamToWord = (\n  data: number[],\n  offp: number,\n): { key: number; offp: number } => {\n  let word = 0;\n\n  for (let i = 0; i < 4; ++i) {\n    word = (word << 8) | (data[offp] & 0xff);\n    offp = (offp + 1) % data.length;\n  }\n\n  return { key: word, offp };\n};\n\nconst key = (\n  key: number[],\n  P: Int32Array<ArrayBuffer>,\n  S: Int32Array<ArrayBuffer>,\n): void => {\n  const pLength = P.length;\n  const sLength = S.length;\n  let offp = 0;\n  let lr = new Int32Array([0, 0]);\n  let sw: {\n    key: number;\n    offp: number;\n  };\n\n  for (let i = 0; i < pLength; i++) {\n    sw = streamToWord(key, offp);\n    offp = sw.offp;\n    P[i] ^= sw.key;\n  }\n\n  for (let i = 0; i < pLength; i += 2) {\n    lr = encipher(lr, 0, P, S);\n    P[i] = lr[0];\n    P[i + 1] = lr[1];\n  }\n\n  for (let i = 0; i < sLength; i += 2) {\n    lr = encipher(lr, 0, P, S);\n    S[i] = lr[0];\n    S[i + 1] = lr[1];\n  }\n};\n\n/**\n * Expensive key schedule Blowfish.\n */\nconst expensiveKeyScheduleBlowFish = (\n  data: number[],\n  key: number[],\n  P: Int32Array<ArrayBuffer>,\n  S: Int32Array<ArrayBuffer>,\n): void => {\n  const pLength = P.length;\n  const sLength = S.length;\n  let offp = 0;\n  let lr = new Int32Array([0, 0]);\n  let sw: {\n    key: number;\n    offp: number;\n  };\n\n  for (let i = 0; i < pLength; i++) {\n    sw = streamToWord(key, offp);\n    offp = sw.offp;\n    P[i] ^= sw.key;\n  }\n\n  offp = 0;\n\n  for (let i = 0; i < pLength; i += 2) {\n    sw = streamToWord(data, offp);\n    offp = sw.offp;\n    lr[0] ^= sw.key;\n    sw = streamToWord(data, offp);\n    offp = sw.offp;\n    lr[1] ^= sw.key;\n    lr = encipher(lr, 0, P, S);\n    P[i] = lr[0];\n    P[i + 1] = lr[1];\n  }\n\n  for (let i = 0; i < sLength; i += 2) {\n    sw = streamToWord(data, offp);\n    offp = sw.offp;\n    lr[0] ^= sw.key;\n    sw = streamToWord(data, offp);\n    offp = sw.offp;\n    lr[1] ^= sw.key;\n    lr = encipher(lr, 0, P, S);\n    S[i] = lr[0];\n    S[i + 1] = lr[1];\n  }\n};\n\n/**\n * Internally crypts a string.\n *\n * @param bytes Bytes to crypt\n * @param salt Salt bytes to use\n * @param rounds Number of rounds\n * @param progressCallback Callback called with the current progress\n */\nexport const crypt = (\n  bytes: number[],\n  salt: number[],\n  rounds: number,\n  sync: boolean,\n  progressCallback?: (progress: number) => void,\n): Promise<number[]> | number[] => {\n  const cdata = new Int32Array(C_ORIG);\n  const cLength = cdata.length;\n\n  rounds = (1 << rounds) >>> 0;\n\n  const P = new Int32Array(P_ORIG);\n  const S = new Int32Array(S_ORIG);\n\n  expensiveKeyScheduleBlowFish(salt, bytes, P, S);\n\n  let round = 0;\n\n  /**\n   * Calculates the next round.\n   */\n  const next = (): Promise<number[] | void> | number[] | void => {\n    if (progressCallback) progressCallback(round / rounds);\n\n    if (round < rounds) {\n      const start = Date.now();\n\n      while (round < rounds) {\n        round += 1;\n        key(bytes, P, S);\n        key(salt, P, S);\n        if (Date.now() - start > MAX_EXECUTION_TIME) break;\n      }\n    } else {\n      for (let i = 0; i < 64; i++)\n        for (let j = 0; j < cLength >> 1; j++) encipher(cdata, j << 1, P, S);\n      const result: number[] = [];\n\n      for (let i = 0; i < cLength; i++) {\n        result.push((cdata[i] >> 24) & 0xff);\n        result.push((cdata[i] >> 16) & 0xff);\n        result.push((cdata[i] >> 8) & 0xff);\n        result.push(cdata[i] & 0xff);\n      }\n\n      if (!sync) return Promise.resolve(result);\n\n      return result;\n    }\n\n    if (!sync)\n      return new Promise((resolve) =>\n        nextTick(() => {\n          void (next() as Promise<number[] | undefined>).then(resolve);\n        }),\n      );\n  };\n\n  if (!sync) return next() as Promise<number[]>;\n\n  let result;\n\n  do {\n    result = next() as number[] | undefined;\n  } while (!result);\n\n  return result;\n};\n","/**\n * @private\n *\n * Generates cryptographically secure random bytes.\n *\n * @param length Bytes length\n * @returns Random bytes\n * @throws {Error} If no random implementation is available\n */\nexport const random = (length: number): Buffer | Uint8Array<ArrayBuffer> =>\n  globalThis.crypto.getRandomValues(new Uint8Array(length));\n","export const getIllegalArgumentsTypeError = (...args: unknown[]): Error =>\n  new Error(`Illegal arguments: ${args.map((arg) => typeof arg).join(\", \")}`);\n","import { nextTick } from \"nextTick\";\nimport { random } from \"random\";\n\nimport { encodeBase64 } from \"./base64.js\";\nimport {\n  BCRYPT_SALT_LEN,\n  GENERATE_SALT_DEFAULT_LOG2_ROUNDS,\n} from \"./constant.js\";\nimport { getIllegalArgumentsTypeError } from \"./utils.js\";\n\n/**\n * Synchronously generates a salt.\n *\n * @param rounds Number of rounds to use, defaults to 10 if omitted\n * @returns Resulting salt\n * @throws {Error} If a random fallback is required but not set\n */\nexport const genSaltSync = (\n  rounds = GENERATE_SALT_DEFAULT_LOG2_ROUNDS,\n): string => {\n  if (typeof rounds !== \"number\") throw getIllegalArgumentsTypeError(rounds);\n\n  rounds = rounds < 4 ? 4 : rounds > 31 ? 31 : rounds;\n\n  return `$2b$${rounds < 10 ? \"0\" : \"\"}${rounds}$${encodeBase64(random(BCRYPT_SALT_LEN), BCRYPT_SALT_LEN)}`;\n};\n\n/**\n * Asynchronously generates a salt.\n *\n * @param rounds Number of rounds to use, defaults to 10 if omitted\n */\nexport const genSalt = (\n  rounds = GENERATE_SALT_DEFAULT_LOG2_ROUNDS,\n): Promise<string> =>\n  new Promise((resolve, reject) =>\n    nextTick(() => {\n      try {\n        resolve(genSaltSync(rounds));\n      } catch (err) {\n        reject(err as Error);\n      }\n    }),\n  );\n","/** Calculates the byte length of a string encoded as UTF8. */\nexport const getUTF8ByteLength = (content: string): number => {\n  let length = 0,\n    charCodePoint = 0;\n\n  for (let i = 0; i < content.length; ++i) {\n    charCodePoint = content.charCodeAt(i);\n    if (charCodePoint < 128) length += 1;\n    else if (charCodePoint < 2048) length += 2;\n    else if (\n      (charCodePoint & 0xfc00) === 0xd800 &&\n      (content.charCodeAt(i + 1) & 0xfc00) === 0xdc00\n    ) {\n      i++;\n      length += 4;\n    } else length += 3;\n  }\n\n  return length;\n};\n\n/** Converts a string to an array of UTF8 bytes. */\nexport const convertToUFT8Bytes = (content: string): number[] => {\n  let offset = 0,\n    c1,\n    c2;\n  const buffer = new Array<number>(getUTF8ByteLength(content));\n\n  for (let i = 0, k = content.length; i < k; ++i) {\n    c1 = content.charCodeAt(i);\n    if (c1 < 128) {\n      buffer[offset++] = c1;\n    } else if (c1 < 2048) {\n      buffer[offset++] = (c1 >> 6) | 192;\n      buffer[offset++] = (c1 & 63) | 128;\n    } else if (\n      (c1 & 0xfc00) === 0xd800 &&\n      ((c2 = content.charCodeAt(i + 1)) & 0xfc00) === 0xdc00\n    ) {\n      c1 = 0x10000 + ((c1 & 0x03ff) << 10) + (c2 & 0x03ff);\n      ++i;\n      buffer[offset++] = (c1 >> 18) | 240;\n      buffer[offset++] = ((c1 >> 12) & 63) | 128;\n      buffer[offset++] = ((c1 >> 6) & 63) | 128;\n      buffer[offset++] = (c1 & 63) | 128;\n    } else {\n      buffer[offset++] = (c1 >> 12) | 224;\n      buffer[offset++] = ((c1 >> 6) & 63) | 128;\n      buffer[offset++] = (c1 & 63) | 128;\n    }\n  }\n\n  return buffer;\n};\n","import { decodeBase64, encodeBase64 } from \"./base64.js\";\nimport {\n  BCRYPT_SALT_LEN,\n  C_ORIG,\n  GENERATE_SALT_DEFAULT_LOG2_ROUNDS,\n} from \"./constant.js\";\nimport { crypt } from \"./crypt.js\";\nimport { genSalt, genSaltSync } from \"./salt.js\";\nimport { convertToUFT8Bytes } from \"./uft8.js\";\n\n/**\n * Internally hashes a string.\n *\n * @private\n * @param content String to hash\n * @param salt Salt to use\n * @param progressCallback Callback called with the current progress\n */\nconst _hash = (\n  content: string,\n  salt: string,\n  sync: boolean,\n  progressCallback?: (progress: number) => void,\n): Promise<string> | string => {\n  if (typeof content !== \"string\" || typeof salt !== \"string\") {\n    const err = new Error(\"Invalid content / salt: not a string\");\n\n    if (!sync) return Promise.reject(err);\n\n    throw err;\n  }\n\n  // Validate the salt\n  let minor: string;\n  let offset: number;\n\n  if (salt.charAt(0) !== \"$\" || salt.charAt(1) !== \"2\") {\n    const err = new Error(\"Invalid salt version: \" + salt.substring(0, 2));\n\n    if (!sync) return Promise.reject(err);\n\n    throw err;\n  }\n\n  if (salt.charAt(2) === \"$\") {\n    minor = String.fromCharCode(0);\n    offset = 3;\n  } else {\n    minor = salt.charAt(2);\n    if (\n      (minor !== \"a\" && minor !== \"b\" && minor !== \"y\") ||\n      salt.charAt(3) !== \"$\"\n    ) {\n      const err = Error(\"Invalid salt revision: \" + salt.substring(2, 4));\n\n      if (!sync) return Promise.reject(err);\n\n      throw err;\n    }\n    offset = 4;\n  }\n\n  const roundText = salt.substring(offset, offset + 2);\n  const rounds = /\\d\\d/.test(roundText) ? Number(roundText) : null;\n\n  // Extract number of rounds\n  if (rounds === null) {\n    const err = new Error(\"Missing salt rounds\");\n\n    if (!sync) return Promise.reject(err);\n\n    throw err;\n  }\n\n  if (rounds < 4 || rounds > 31) {\n    const err = new Error(`Illegal number of rounds (4-31): ${rounds}`);\n\n    if (!sync) return Promise.reject(err);\n\n    throw err;\n  }\n\n  const realSalt = salt.substring(offset + 3, offset + 25);\n\n  content += minor >= \"a\" ? \"\\x00\" : \"\";\n\n  const passwordBytes = convertToUFT8Bytes(content),\n    saltBytes = decodeBase64(realSalt, BCRYPT_SALT_LEN);\n\n  if (saltBytes.length !== BCRYPT_SALT_LEN) {\n    const err = new Error(`Illegal salt: ${realSalt}`);\n\n    if (!sync) return Promise.reject(err);\n\n    throw err;\n  }\n\n  /**\n   * Finishes hashing.\n   * @param bytes Byte array\n   */\n  const finish = (bytes: number[]): string =>\n    `$2${minor >= \"a\" ? minor : \"\"}$${rounds < 10 ? \"0\" : \"\"}${rounds}$${encodeBase64(\n      saltBytes,\n      BCRYPT_SALT_LEN,\n    )}${encodeBase64(bytes, C_ORIG.length * 4 - 1)}`;\n\n  // Sync\n  if (!sync)\n    return (\n      crypt(\n        passwordBytes,\n        saltBytes,\n        rounds,\n        false,\n        progressCallback,\n      ) as Promise<number[]>\n    ).then((bytes) => finish(bytes));\n\n  return finish(\n    crypt(passwordBytes, saltBytes, rounds, true, progressCallback) as number[],\n  );\n};\n\n/**\n * Synchronously generates a hash for the given string.\n *\n * @param contentString String to hash\n * @param salt Salt length to generate or salt to use, default to 10\n * @returns Resulting hash\n */\nexport const hashSync = (\n  contentString: string,\n  salt: string | number = GENERATE_SALT_DEFAULT_LOG2_ROUNDS,\n): string =>\n  _hash(\n    contentString,\n    typeof salt === \"number\" ? genSaltSync(salt) : salt,\n    true,\n  ) as string;\n\n/**\n * Asynchronously generates a hash for the given string.\n *\n * @param contentString String to hash\n * @param salt Salt length to generate or salt to use\n * @param progressCallback Callback successively called with the percentage of rounds completed\n *  (0.0 - 1.0), maximally once per `MAX_EXECUTION_TIME = 100` ms.\n */\nexport const hash = async (\n  contentString: string,\n  salt: number | string,\n  progressCallback?: (progress: number) => void,\n): Promise<string> =>\n  _hash(\n    contentString,\n    typeof salt === \"number\" ? await genSalt(salt) : salt,\n    false,\n    progressCallback,\n  ) as Promise<string>;\n","import { nextTick } from \"nextTick\";\n\nimport { hash as hashAsync, hashSync } from \"./hash.js\";\nimport { getIllegalArgumentsTypeError } from \"./utils.js\";\n\n/**\n * Synchronously tests a string against a hash.\n *\n * @param content String to compare\n * @param hash Hash to test against\n */\nexport const compareSync = (content: string, hash: string): boolean => {\n  if (typeof content !== \"string\" || typeof hash !== \"string\")\n    throw getIllegalArgumentsTypeError(content, hash);\n\n  if (hash.length !== 60) return false;\n\n  return hashSync(content, hash.substring(0, 29)) === hash;\n};\n\n/**\n * Asynchronously compares the given data against the given hash.\n *\n * @param content Data to compare\n * @param hash Data to be compared to\n * @param progressCallback Callback successively called with the percentage of rounds completed\n *  (0.0 - 1.0), maximally once per `MAX_EXECUTION_TIME = 100` ms.\n */\nexport const compare = (\n  content: string,\n  hash: string,\n  progressCallback?: (percent: number) => void,\n): Promise<boolean> =>\n  new Promise((resolve, reject) => {\n    if (typeof content !== \"string\" || typeof hash !== \"string\") {\n      nextTick(() =>\n        reject(\n          new Error(`Illegal arguments: ${typeof content}, ${typeof hash}`),\n        ),\n      );\n\n      return;\n    }\n\n    if (hash.length !== 60) {\n      nextTick(() => resolve(false));\n\n      return;\n    }\n\n    hashAsync(content, hash.substring(0, 29), progressCallback)\n      .then((comp) => resolve(comp === hash))\n      .catch((err: unknown) => reject(err as Error));\n  });\n","import { getUTF8ByteLength } from \"./uft8.js\";\nimport { getIllegalArgumentsTypeError } from \"./utils.js\";\n\n/**\n * Gets the number of rounds used to encrypt the specified hash.\n *\n * @param hash Hash to extract the used number of rounds from\n * @returns Number of rounds used\n * @throws {Error} If `hash` is not a string\n */\nexport const getRounds = (hash: string): number => {\n  if (typeof hash !== \"string\") throw getIllegalArgumentsTypeError(hash);\n\n  return parseInt(hash.split(\"$\")[2], 10);\n};\n\n/**\n * Gets the salt portion from a hash. Does not validate the hash.\n *\n * @param hash Hash to extract the salt from\n * @returns Extracted salt part\n * @throws {Error} If `hash` is not a string or otherwise invalid\n */\nexport const getSalt = (hash: string): string => {\n  if (typeof hash !== \"string\") throw getIllegalArgumentsTypeError(hash);\n\n  if (hash.length !== 60)\n    throw new Error(`Illegal hash length: ${hash.length} != 60`);\n\n  return hash.substring(0, 29);\n};\n\n/**\n * Tests if a content will be truncated when hashed, that is its length is\n * greater than 72 bytes when converted to UTF-8.\n * @param content The content to test\n * @returns `true` if truncated, otherwise `false`\n */\nexport const truncates = (content: string): boolean => {\n  if (typeof content !== \"string\") throw getIllegalArgumentsTypeError(content);\n\n  return getUTF8ByteLength(content) > 72;\n};\n"],"names":["nextTick","BCRYPT_SALT_LEN","GENERATE_SALT_DEFAULT_LOG2_ROUNDS","BLOWFISH_NUM_ROUNDS","MAX_EXECUTION_TIME","BASE64_CODE","BASE64_INDEX","P_ORIG","S_ORIG","C_ORIG","encodeBase64","byteArray","length","off","c1","c2","result","decodeBase64","contentString","stringLength","olen","c3","c4","o","code","item","encipher","lr","P","S","n","l","r","streamToWord","data","offp","word","i","key","pLength","sLength","sw","expensiveKeyScheduleBlowFish","crypt","bytes","salt","rounds","sync","progressCallback","cdata","cLength","round","next","start","j","resolve","random","getIllegalArgumentsTypeError","args","arg","genSaltSync","genSalt","reject","err","getUTF8ByteLength","content","charCodePoint","convertToUFT8Bytes","offset","buffer","k","_hash","minor","roundText","realSalt","passwordBytes","saltBytes","finish","hashSync","hash","compareSync","compare","hashAsync","comp","getRounds","getSalt","truncates"],"mappings":"aAKO,MAAMA,EACX,QAAQ,IAAI,eAAiB,OAEzB,WACA,aCTOC,EAAkB,GAElBC,EAAoC,GAEpCC,EAAsB,GAEtBC,EAAqB,IAErBC,EACX,mEAAmE,MAAM,EAAE,EAEhEC,EAAe,CAC1B,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACxE,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACxE,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC1E,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GACxE,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACxE,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACxE,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAC1C,EAEaC,EAAS,CACpB,UAAY,WAAY,UAAY,SAAY,WAAY,UAC5D,UAAY,WAAY,WAAY,UAAY,WAAY,UAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,UAC9D,EAEaC,EAAS,CACpB,WAAY,WAAY,UAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,UAAY,WAAY,UAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,UAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,UAC5D,WAAY,UAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,UAC5D,WAAY,UAAY,WAAY,WAAY,WAAY,WAC5D,UAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,UAAY,UAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,UAAY,WAAY,UAAY,WAC5D,UAAY,WAAY,WAAY,WAAY,UAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,UAAY,WAAY,WAAY,WAAY,UAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,UAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,UAC5D,UAAY,WAAY,UAAY,WAAY,WAAY,WAC5D,UAAY,WAAY,UAAY,WAAY,WAAY,WAC5D,WAAY,SAAY,WAAY,WAAY,WAAY,UAC5D,WAAY,WAAY,UAAY,UAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,UAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,UAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,UAAY,WAAY,UAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,UAAY,WAC5D,WAAY,UAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,UAAY,WAAY,WAAY,UAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,UAAY,WAAY,UAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,UAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,UAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,UAAY,WAC5D,WAAY,UAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,QAAY,UAC5D,UAAY,WAAY,UAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,UAAY,SAAY,WAAY,WAC5D,UAAY,WAAY,WAAY,WAAY,UAAY,WAC5D,WAAY,WAAY,UAAY,WAAY,UAAY,WAC5D,WAAY,UAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,UAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,SAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,UAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,SAAY,UAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,SAC5D,WAAY,WAAY,UAAY,WAAY,WAAY,WAC5D,WAAY,UAAY,UAAY,UAAY,WAAY,WAC5D,WAAY,UAAY,WAAY,WAAY,WAAY,WAC5D,UAAY,UAAY,WAAY,WAAY,WAAY,WAC5D,UAAY,UAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,UAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,UAAY,WAAY,UAC5D,UAAY,UAAY,WAAY,UAAY,WAAY,UAC5D,WAAY,WAAY,SAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,UAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,UAAY,WAC5D,WAAY,WAAY,UAAY,WAAY,WAAY,WAC5D,WAAY,UAAY,WAAY,UAAY,UAAY,UAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,SAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,UAAY,WAAY,UAAY,UAC5D,WAAY,WAAY,UAAY,WAAY,SAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,UAAY,WAAY,WAC5D,WAAY,WAAY,UAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,UAAY,UAC5D,UAAY,WAAY,WAAY,WAAY,WAAY,UAC5D,WAAY,UAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,UAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,UAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,UAAY,WAC5D,UAAY,UAAY,WAAY,UAAY,UAAY,UAC5D,UAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,UAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,UAAY,WAAY,UAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,UAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,UAC5D,WAAY,WAAY,UAAY,WAAY,UAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,SAC5D,WAAY,UAAY,WAAY,WAAY,WAAY,WAC5D,UAAY,WAAY,UAAY,WAAY,WAAY,WAC5D,WAAY,UAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,UAAY,WAC5D,WAAY,UAAY,UAAY,WAAY,UAAY,WAC5D,UAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,UAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,SAAY,WAAY,SAC5D,WAAY,WAAY,WAAY,WAAY,UAAY,WAC5D,WAAY,WAAY,UAAY,WAAY,WAAY,WAC5D,UAAY,WAAY,WAAY,UAAY,UAAY,SAC5D,WAAY,WAAY,WAAY,UAAY,UAAY,WAC5D,WAAY,WAAY,WAAY,UAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,UAAY,WAAY,UAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,UAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,UAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,UAAY,WAAY,WAAY,WAAY,UAAY,WAC5D,UAAY,UAAY,WAAY,WAAY,WAAY,UAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,UAC5D,WAAY,WAAY,WAAY,WAAY,UAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,UAC5D,WAAY,UAAY,UAAY,UAAY,WAAY,UAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,UAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,QAAY,UAAY,UAAY,UAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,UAAY,WAAY,WAAY,WAC5D,UAAY,WAAY,WAAY,UAAY,WAAY,WAC5D,UAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,UAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,UAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,UAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,UAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,UAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,UAAY,WAAY,WAC5D,UAAY,SAAY,WAAY,SAAY,WAAY,WAC5D,UAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,UAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,UAAY,WAC5D,SAAY,SAAY,WAAY,WAAY,WAAY,WAC5D,UAAY,UAAY,WAAY,UAAY,WAAY,WAC5D,SAAY,WAAY,UAAY,WAAY,WAAY,WAC5D,WAAY,UAAY,UAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,UAAY,WAAY,WAC5D,WAAY,UAAY,WAAY,UAAY,WAAY,WAC5D,WAAY,UAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,UAAY,SAAY,UAAY,WAAY,UAAY,WAC5D,WAAY,UAAY,SAAY,UAAY,WAAY,WAC5D,WAAY,UAAY,WAAY,WAAY,UAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,UAAY,WAC5D,WAAY,WAAY,SAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,UAAY,WAAY,UAC5D,UAAY,WAAY,WAAY,WAAY,WAAY,UAC5D,WAAY,WAAY,UAAY,WAAY,WAAY,UAC5D,WAAY,UAAY,WAAY,WAAY,WAAY,WAC5D,UAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,UAAY,WAAY,UAAY,WAAY,WAC5D,UAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,WAAY,WAAY,WAAY,WAAY,WAAY,WAC5D,W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"}