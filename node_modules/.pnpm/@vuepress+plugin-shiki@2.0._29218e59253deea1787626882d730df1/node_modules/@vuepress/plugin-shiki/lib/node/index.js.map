{"version":3,"file":"index.js","sources":["../../src/node/markdown/highlighter/createMarkdownFilePathGetter.ts","../../src/node/transformers/vuepressTransformers.ts","../../src/node/utils.ts","../../src/node/markdown/highlighter/createShikiHighlighter.ts","../../src/node/transformers/getTransformers.ts","../../src/node/markdown/highlighter/getLanguage.ts","../../src/node/markdown/highlighter/handleMustache.ts","../../src/node/markdown/highlighter/getHighLightFunction.ts","../../src/node/markdown/preWrapperPlugin.ts","../../src/node/prepareClientConfigFile.ts","../../src/node/shikiPlugin.ts"],"sourcesContent":["import type MarkdownIt from 'markdown-it'\nimport type { MarkdownEnv } from 'vuepress/markdown'\n\n/**\n * Markdown file path getter function type\n *\n * Markdown 文件路径获取器函数类型\n */\nexport type MarkdownFilePathGetter = () => string\n\n/**\n * Create a function to get current markdown file path\n *\n * 创建获取当前 markdown 文件路径的函数\n *\n * @param md - MarkdownIt instance / MarkdownIt 实例\n *\n * @returns Function to get current markdown file path / 获取当前 markdown 文件路径的函数\n */\nexport const createMarkdownFilePathGetter = (\n  md: MarkdownIt,\n): MarkdownFilePathGetter => {\n  const store: { path?: string | null } = {}\n\n  const rawRender = md.render.bind(md)\n\n  // we need to store file path before each render\n  md.render = (src, env: MarkdownEnv = {}) => {\n    store.path = env.filePathRelative\n\n    return rawRender(src, env)\n  }\n\n  return () => store.path || 'dynamic pages'\n}\n","import type { ShikiTransformer } from 'shiki'\n\nconst CODE_ESCAPE_RE = /\\[\\\\!code/g\n\nexport const addClassTransformer: ShikiTransformer = {\n  name: 'vuepress:add-class',\n  pre(node) {\n    this.addClassToHast(node, 'vp-code')\n  },\n}\n\nexport const cleanupTransformer: ShikiTransformer = {\n  name: 'vuepress:cleanup',\n  pre(node) {\n    delete node.properties.tabindex\n  },\n}\n\n/**\n * This `transformer` is primarily for the usage instructions of themes.\n * When developers need to provide an example like `// [!code xxx]`,\n * they can use `// [\\!code xxx]` to avoid being processed by `shiki`.\n * After `shiki` completes the processing,\n * replace `[\\!code` back with `[!code` to display the correct text.\n */\nexport const removeEscapeTransformer: ShikiTransformer = {\n  name: 'vuepress:remove-escape',\n  postprocess(code) {\n    return code.replace(CODE_ESCAPE_RE, '[!code')\n  },\n}\n\nexport const emptyLineTransformer: ShikiTransformer = {\n  name: 'vuepress:empty-line',\n  code(hast) {\n    hast.children.forEach((span) => {\n      if (\n        span.type === 'element' &&\n        span.tagName === 'span' &&\n        Array.isArray(span.properties.class) &&\n        span.properties.class.includes('line') &&\n        span.children.length === 0\n      ) {\n        span.children.push({\n          type: 'element',\n          tagName: 'wbr',\n          properties: {},\n          children: [],\n        })\n      }\n    })\n  },\n}\n\nexport const vPreTransformer: ShikiTransformer = {\n  name: 'vuepress:v-pre',\n  pre(node) {\n    node.properties['v-pre'] = ''\n  },\n}\n","import type { TransformerCompactLineOption } from '@shikijs/transformers'\nimport { Logger } from '@vuepress/helper'\nimport { customAlphabet } from 'nanoid'\n\nconst VUE_RE = /-vue$/\n\nexport const TWOSLASH_RE = /\\btwoslash\\b/\n\nexport const PLUGIN_NAME = '@vuepress/plugin-shiki'\n\nexport const logger = new Logger(PLUGIN_NAME)\n\nexport const nanoid = customAlphabet('abcdefghijklmnopqrstuvwxyz', 10)\n\n/**\n * Resolve language from code fence info string\n *\n * 从代码围栏信息字符串中解析语言\n *\n * @param info - Code fence info string / 代码围栏信息字符串\n *\n * @returns Resolved language / 解析的语言\n */\nexport const resolveLanguage = (info: string): string =>\n  info\n    .match(/^([^ :[{]+)/)?.[1]\n    ?.replace(VUE_RE, '')\n    .toLowerCase() ?? ''\n\n/**\n * Convert attributes to line options\n *\n * 将属性转换为行选项\n *\n * @description 2 steps:\n * 1. convert attrs into line numbers:\n *    {4,7-13,16,23-27,40} -> [4,7,8,9,10,11,12,13,16,23,24,25,26,27,40]\n * 2. convert line numbers into line options:\n *    [{ line: number, classes: string[] }]\n *\n * 转换分为两步：\n * 1. 将属性转换为行号数组\n * 2. 将行号数组转换为行选项\n *\n * @param attrs - Attributes string / 属性字符串\n *\n * @returns Line options array / 行选项数组\n */\nexport const attrsToLines = (attrs: string): TransformerCompactLineOption[] => {\n  const attrsContent = attrs\n    .replace(/^(?:\\[.*?\\])?.*?\\{([\\d,-]+)\\}.*/, '$1')\n    .trim()\n  const result: number[] = []\n\n  if (!attrsContent) {\n    return []\n  }\n\n  attrsContent\n    .split(',')\n    .map((lineNumberConfig) =>\n      lineNumberConfig.split('-').map((lineNumber) => parseInt(lineNumber, 10)),\n    )\n    .forEach(([start, end]) => {\n      if (start && end) {\n        result.push(\n          ...Array.from({ length: end - start + 1 }, (_, i) => start + i),\n        )\n      } else {\n        result.push(start)\n      }\n    })\n\n  return result.map((line) => ({\n    line,\n    classes: ['highlighted'],\n  }))\n}\n","import { createRequire } from 'node:module'\nimport type {\n  BundledLanguage,\n  BundledTheme,\n  HighlighterGeneric,\n  ShikiTransformer,\n} from 'shiki'\nimport { createHighlighter, isSpecialLang } from 'shiki'\nimport { createSyncFn } from 'synckit'\nimport type { App } from 'vuepress'\nimport { isPlainObject } from 'vuepress/shared'\nimport type { ShikiPluginOptions } from '../../options.js'\nimport type { ShikiResolveLang } from '../../resolveLang.js'\nimport { vPreTransformer } from '../../transformers/vuepressTransformers.js'\nimport { resolveLanguage } from '../../utils.js'\n\nconst require = createRequire(import.meta.url)\n\nconst resolveLangSync = createSyncFn<ShikiResolveLang>(\n  require.resolve('@vuepress/plugin-shiki/resolveLang'),\n)\n\n/**\n * Load language function type\n *\n * 加载语言函数类型\n */\nexport type ShikiLoadLang = (lang: string) => boolean\n\n/**\n * Create Shiki highlighter with additional features\n *\n * 创建带有额外功能的 Shiki 高亮器\n *\n * @param app - VuePress app instance / VuePress 应用实例\n * @param options - Plugin options / 插件选项\n * @param enableVPre - Whether to enable v-pre transformer / 是否启用 v-pre 转换器\n *\n * @default enableVPre: true\n *\n * @returns Object containing highlighter, loadLang function and extra transformers / 包含高亮器、loadLang 函数和额外转换器的对象\n */\nexport const createShikiHighlighter = async (\n  app: App,\n  {\n    langs = [],\n    langAlias = {},\n    defaultLang,\n    shikiSetup,\n    ...options\n  }: ShikiPluginOptions = {},\n  enableVPre = true,\n): Promise<{\n  highlighter: HighlighterGeneric<BundledLanguage, BundledTheme>\n  loadLang: ShikiLoadLang\n  extraTransformers: ShikiTransformer[]\n}> => {\n  const highlighter = await createHighlighter({\n    langs: [...langs, ...Object.values(langAlias)],\n    langAlias,\n    themes:\n      'themes' in options\n        ? Object.values(options.themes)\n        : [options.theme ?? 'nord'],\n  })\n\n  const loadLang = (lang: string): boolean => {\n    if (isSpecialLang(lang)) return true\n\n    const loadedLangs = highlighter.getLoadedLanguages()\n\n    if (!loadedLangs.includes(lang)) {\n      const resolvedLang = resolveLangSync(lang)\n\n      if (!resolvedLang.length) return false\n\n      highlighter.loadLanguageSync(resolvedLang)\n    }\n\n    return true\n  }\n\n  // patch for twoslash - https://github.com/vuejs/vitepress/issues/4334\n  const rawGetLanguage = highlighter.getLanguage\n\n  highlighter.getLanguage = (name) => {\n    const lang = typeof name === 'string' ? name : name.name\n\n    loadLang(resolveLanguage(lang))\n\n    return rawGetLanguage.call(highlighter, name)\n  }\n\n  const extraTransformers: ShikiTransformer[] = []\n\n  if (enableVPre) extraTransformers.push(vPreTransformer)\n\n  if (options.twoslash) {\n    const { createTwoslashTransformer, createFileSystemTypesCache } =\n      await import('@vuepress/shiki-twoslash')\n\n    const { typesCache, ...twoslashOptions } = isPlainObject(options.twoslash)\n      ? options.twoslash\n      : {}\n    extraTransformers.push(\n      await createTwoslashTransformer({\n        ...twoslashOptions,\n        typesCache:\n          typesCache === true || typeof typesCache === 'undefined'\n            ? createFileSystemTypesCache({\n                dir: app.dir.cache('markdown/twoslash'),\n              })\n            : typesCache,\n      }),\n    )\n  }\n\n  await shikiSetup?.(highlighter)\n\n  return { highlighter, loadLang, extraTransformers }\n}\n","import {\n  transformerMetaWordHighlight,\n  transformerNotationDiff,\n  transformerNotationErrorLevel,\n  transformerNotationFocus,\n  transformerNotationHighlight,\n  transformerNotationWordHighlight,\n  transformerRenderWhitespace,\n} from '@shikijs/transformers'\nimport type { WhitespacePosition } from '@vuepress/highlighter-helper'\nimport { resolveWhitespacePosition } from '@vuepress/highlighter-helper'\nimport type { ShikiTransformer } from 'shiki'\nimport type { ShikiHighlightOptions } from '../types.js'\nimport {\n  addClassTransformer,\n  cleanupTransformer,\n  emptyLineTransformer,\n  removeEscapeTransformer,\n} from './vuepressTransformers.js'\n\nexport const getTransformers = (\n  options: ShikiHighlightOptions & {\n    twoslash?: boolean\n  },\n): ShikiTransformer[] => {\n  const transformers: ShikiTransformer[] = []\n\n  if (options.notationDiff) {\n    transformers.push(transformerNotationDiff())\n  }\n\n  if (options.notationFocus) {\n    transformers.push(\n      transformerNotationFocus({\n        classActiveLine: 'has-focus',\n        classActivePre: 'has-focused-lines',\n      }),\n    )\n  }\n\n  if (options.notationHighlight) {\n    transformers.push(transformerNotationHighlight())\n  }\n\n  if (options.notationErrorLevel) {\n    transformers.push(transformerNotationErrorLevel())\n  }\n\n  if (options.notationWordHighlight) {\n    transformers.push(transformerNotationWordHighlight())\n    transformers.push(transformerMetaWordHighlight())\n  }\n\n  transformers.push(\n    addClassTransformer,\n    cleanupTransformer,\n    removeEscapeTransformer,\n    emptyLineTransformer,\n  )\n\n  return transformers\n}\n\nexport const whitespaceTransformer = (\n  meta: string,\n  globalOption: WhitespacePosition | true = true,\n): ShikiTransformer[] => {\n  const position = resolveWhitespacePosition(meta, globalOption)\n\n  return position ? [transformerRenderWhitespace({ position })] : []\n}\n","import { colors } from 'vuepress/utils'\nimport type { ShikiHighlightOptions } from '../../types.js'\nimport { logger, resolveLanguage } from '../../utils.js'\nimport type { MarkdownFilePathGetter } from './createMarkdownFilePathGetter.js'\nimport type { ShikiLoadLang } from './createShikiHighlighter.js'\n\nconst WARNED_LANGS = new Set<string>()\n\nexport const getLanguage = (\n  lang: string,\n  { defaultLang, logLevel }: ShikiHighlightOptions,\n  loadLang: ShikiLoadLang,\n  markdownFilePathGetter: MarkdownFilePathGetter,\n): string => {\n  let result = resolveLanguage(lang)\n\n  if (result && !loadLang(result)) {\n    // warn for unknown languages only once\n    if (logLevel !== 'silent' && !WARNED_LANGS.has(result)) {\n      logger.warn(\n        `Missing ${colors.cyan(lang)} highlighter, ${defaultLang ? `use ${colors.cyan(defaultLang)} to highlight instead.` : 'skip highlighting'}`,\n      )\n      WARNED_LANGS.add(result)\n    }\n\n    // log file path if unknown language is found\n    if (logLevel === 'debug') {\n      logger.info(\n        `Unknown language ${colors.cyan(result)} found in ${colors.cyan(markdownFilePathGetter())}`,\n      )\n    }\n\n    result = defaultLang || 'plain'\n  }\n\n  return result\n}\n","import { nanoid } from '../../utils.js'\n\nconst MUSTACHE_REG = /\\{\\{[^]*?\\}\\}/g\n\ntype MustacheStore = Map<string, string>\n\n/**\n * Replace mustache with unique markers\n * @param str content\n * @param store mustache store\n * @returns\n */\nconst removeMustache = (str: string, store: MustacheStore): string =>\n  str.replace(MUSTACHE_REG, (match) => {\n    let marker = store.get(match)\n\n    if (!marker) {\n      marker = nanoid()\n      store.set(match, marker)\n    }\n\n    return marker\n  })\n\nconst restoreMustache = (str: string, store: MustacheStore): string => {\n  let result = str\n\n  store.forEach((marker, match) => {\n    result = result.replaceAll(marker, match)\n  })\n\n  return result\n}\n\nexport const handleMustache = (\n  str: string,\n  highlight: (str: string) => string,\n): string => {\n  const store = new Map<string, string>()\n\n  return restoreMustache(highlight(removeMustache(str, store).trimEnd()), store)\n}\n","import { transformerCompactLineOptions } from '@shikijs/transformers'\nimport type {\n  BundledLanguage,\n  BundledTheme,\n  HighlighterGeneric,\n  ShikiTransformer,\n} from 'shiki'\nimport {\n  getTransformers,\n  whitespaceTransformer,\n} from '../../transformers/getTransformers.js'\nimport type { ShikiHighlightOptions } from '../../types.js'\nimport { attrsToLines } from '../../utils.js'\nimport type { MarkdownFilePathGetter } from './createMarkdownFilePathGetter.js'\nimport type { ShikiLoadLang } from './createShikiHighlighter.js'\nimport { getLanguage } from './getLanguage.js'\nimport { handleMustache } from './handleMustache.js'\n\ntype MarkdownItHighlight = (\n  content: string,\n  language: string,\n  attrs: string,\n) => string\n\n/**\n * Get highlight function for markdown-it\n *\n * 获取 markdown-it 的高亮函数\n *\n * @param highlighter - Shiki highlighter instance / Shiki 高亮器实例\n * @param options - Highlight options / 高亮选项\n * @param extraTransformers - Extra transformers / 额外转换器\n * @param loadLang - Language loader function / 语言加载函数\n * @param markdownFilePathGetter - Markdown file path getter / Markdown 文件路径获取器\n *\n * @returns Highlight function for markdown-it / markdown-it 的高亮函数\n */\nexport const getHighLightFunction = (\n  highlighter: HighlighterGeneric<BundledLanguage, BundledTheme>,\n  options: ShikiHighlightOptions,\n  extraTransformers: ShikiTransformer[] | undefined,\n  loadLang: ShikiLoadLang,\n  markdownFilePathGetter: MarkdownFilePathGetter,\n): MarkdownItHighlight => {\n  const transformers = getTransformers(options)\n\n  return (content, language, attrs) =>\n    handleMustache(content, (str) =>\n      highlighter.codeToHtml(str, {\n        lang: getLanguage(language, options, loadLang, markdownFilePathGetter),\n        meta: {\n          /**\n           * Custom `transformers` passed by users may require `attrs`.\n           * e.g. [transformerNotationWordHighlight](https://shiki.style/packages/transformers#transformernotationwordhighlight)\n           */\n          __raw: attrs,\n        },\n        transformers: [\n          ...transformers,\n          ...((options.highlightLines ?? true)\n            ? [transformerCompactLineOptions(attrsToLines(attrs))]\n            : []),\n          ...(options.whitespace\n            ? whitespaceTransformer(attrs, options.whitespace)\n            : []),\n          ...(extraTransformers ?? []),\n          ...(options.transformers ?? []),\n        ],\n        ...('themes' in options\n          ? {\n              themes: options.themes,\n              defaultColor: false,\n            }\n          : { theme: options.theme ?? 'nord' }),\n      }),\n    )\n}\n","// markdown-it plugin for generating line numbers.\n// v-pre block logic is in `../highlight.ts`\nimport type { Markdown } from 'vuepress/markdown'\nimport { resolveLanguage } from '../utils.js'\n\nconst PRE_ATTRS_REGEXP = /<pre([\\s\\S]*?)style=\"([^\"]*)\"([^>]*)>/\n\nexport interface MarkdownItPreWrapperOptions {\n  /**\n   * Wrap the `<pre>` tag with an extra `<div>` or not. Do not disable it unless you\n   * understand what's it for\n   *\n   * - Required for line numbers, title display and code block collapsing\n   */\n  preWrapper?: boolean\n}\n\n/**\n * A markdown-it plugin for wrapping `<pre>` tag with an extra `<div>`\n *\n * 一个用于为 `<pre>` 标签添加额外 `<div>` 包装的 markdown-it 插件\n *\n * @param md - MarkdownIt instance / MarkdownIt 实例\n * @param options - Plugin options / 插件选项\n *\n * @default { preWrapper: true }\n */\nexport const preWrapperPlugin = (\n  md: Markdown,\n  { preWrapper = true }: MarkdownItPreWrapperOptions = {},\n): void => {\n  const rawFence = md.renderer.rules.fence!\n\n  md.renderer.rules.fence = (...args) => {\n    let result = rawFence(...args)\n\n    if (!result.startsWith('<pre')) {\n      return result\n    }\n\n    const [tokens, idx, options] = args\n    const token = tokens[idx]\n\n    // get token info\n    const info = token.info ? md.utils.unescapeAll(token.info).trim() : ''\n\n    const lang = resolveLanguage(info)\n    const languageClass = `${options.langPrefix}${lang}`\n\n    result = result.replace(/<code[^]*?>/, `<code class=\"${languageClass}\">`)\n    if (!preWrapper) {\n      result = `<pre class=\"${languageClass} ${result.slice('<pre class=\"'.length)}`\n      return result\n    }\n    let styles = ''\n\n    // before: maybe `v-pre class=\"shiki *\"`\n    // after: style=\"*\" tab-index=\"*\"\n    result = result.replace(\n      PRE_ATTRS_REGEXP,\n      (_, before: string, style: string, after: string) => {\n        styles = style.trim()\n        // Keep `v-pre class=\"*\"`, remove the rest.\n        return `<pre ${before.trim()}${after.trimEnd()}>`\n      },\n    )\n\n    /**\n     * Add information to dataset for current code block.\n     */\n    return `<div class=\"${languageClass}\" data-highlighter=\"shiki\" data-ext=\"${lang}\" style=\"${styles}\">${result}</div>`\n  }\n}\n","import { getModulePath } from '@vuepress/helper'\nimport type { App } from 'vuepress'\nimport type { ShikiPluginOptions } from './options.js'\nimport { PLUGIN_NAME } from './utils.js'\n\nexport const prepareClientConfigFile = (\n  app: App,\n  {\n    lineNumbers = true,\n    highlightLines = true,\n    collapsedLines = 'disable',\n    codeBlockTitle = true,\n    notationDiff,\n    notationErrorLevel,\n    notationFocus,\n    notationHighlight,\n    notationWordHighlight,\n    whitespace,\n    twoslash,\n  }: ShikiPluginOptions,\n): Promise<string> => {\n  const imports: string[] = [\n    `import \"${getModulePath('@vuepress/highlighter-helper/styles/base.css', import.meta)}\"`,\n    `import \"${getModulePath(`${PLUGIN_NAME}/styles/shiki.css`, import.meta)}\"`,\n  ]\n\n  const enhances: string[] = []\n  const setups: string[] = []\n\n  if (lineNumbers !== 'disable') {\n    imports.push(\n      `import \"${getModulePath('@vuepress/highlighter-helper/styles/line-numbers.css', import.meta)}\"`,\n    )\n  }\n\n  if (highlightLines || notationHighlight) {\n    imports.push(\n      `import \"${getModulePath('@vuepress/highlighter-helper/styles/notation-highlight.css', import.meta)}\"`,\n    )\n  }\n\n  if (notationDiff) {\n    imports.push(\n      `import \"${getModulePath('@vuepress/highlighter-helper/styles/notation-diff.css', import.meta)}\"`,\n    )\n  }\n\n  if (notationErrorLevel) {\n    imports.push(\n      `import \"${getModulePath('@vuepress/highlighter-helper/styles/notation-error-level.css', import.meta)}\"`,\n    )\n  }\n\n  if (notationFocus) {\n    imports.push(\n      `import \"${getModulePath('@vuepress/highlighter-helper/styles/notation-focus.css', import.meta)}\"`,\n    )\n  }\n\n  if (notationHighlight) {\n    imports.push(\n      `import \"${getModulePath('@vuepress/highlighter-helper/styles/notation-highlight.css', import.meta)}\"`,\n    )\n  }\n\n  if (notationWordHighlight) {\n    imports.push(\n      `import \"${getModulePath('@vuepress/highlighter-helper/styles/notation-word-highlight.css', import.meta)}\"`,\n    )\n  }\n\n  if (whitespace) {\n    imports.push(\n      `import \"${getModulePath('@vuepress/highlighter-helper/styles/whitespace.css', import.meta)}\"`,\n    )\n  }\n\n  if (collapsedLines !== 'disable') {\n    imports.push(\n      `import \"${getModulePath('@vuepress/highlighter-helper/styles/collapsed-lines.css', import.meta)}\"`,\n      `import { setupCollapsedLines } from \"${getModulePath('@vuepress/highlighter-helper/client', import.meta)}\"`,\n    )\n    setups.push('setupCollapsedLines()')\n  }\n\n  if (codeBlockTitle) {\n    imports.push(\n      `import \"${getModulePath('@vuepress/highlighter-helper/styles/code-block-title.css', import.meta)}\"`,\n    )\n  }\n\n  if (twoslash) {\n    imports.push(\n      `import { enhanceTwoslash } from \"${getModulePath('@vuepress/shiki-twoslash/client', import.meta)}\"`,\n    )\n    imports.push(\n      `import \"${getModulePath('@vuepress/shiki-twoslash/styles/twoslash.css', import.meta)}\"`,\n    )\n    enhances.push('enhanceTwoslash(app)')\n  }\n\n  let code = imports.join('\\n')\n\n  if (setups.length || enhances.length) {\n    code += `\nexport default {\n`\n\n    if (enhances.length) {\n      code += `\\\n  enhance({ app }) {\n    ${enhances.join('\\n    ')}\n  },\n`\n    }\n\n    if (setups.length) {\n      code += `\\\n  setup() {\n    ${setups.join('\\n    ')}\n  },\n`\n    }\n\n    code += `\\\n}\n`\n  }\n\n  return app.writeTemp('shiki/config.js', code)\n}\n","import { isModuleAvailable } from '@vuepress/helper'\nimport type {\n  MarkdownItCodeBlockTitleOptions,\n  MarkdownItCollapsedLinesOptions,\n  MarkdownItLineNumbersOptions,\n} from '@vuepress/highlighter-helper'\nimport {\n  codeBlockTitle as codeBlockTitlePlugin,\n  collapsedLines as collapsedLinesPlugin,\n  lineNumbers as lineNumbersPlugin,\n} from '@vuepress/highlighter-helper'\nimport type { Plugin } from 'vuepress/core'\nimport { isPlainObject } from 'vuepress/shared'\nimport { colors } from 'vuepress/utils'\nimport { createMarkdownFilePathGetter } from './markdown/highlighter/createMarkdownFilePathGetter.js'\nimport type { MarkdownItPreWrapperOptions } from './markdown/index.js'\nimport {\n  createShikiHighlighter,\n  getHighLightFunction,\n  preWrapperPlugin,\n} from './markdown/index.js'\nimport type { ShikiPluginOptions } from './options.js'\nimport { prepareClientConfigFile } from './prepareClientConfigFile.js'\nimport { TWOSLASH_RE, logger } from './utils.js'\n\n/**\n * Shiki plugin for VuePress\n *\n * VuePress 的 Shiki 插件\n *\n * @param options - Plugin options / 插件选项\n *\n * @returns VuePress plugin / VuePress 插件\n *\n * @example\n * ```ts\n * import { shikiPlugin } from '@vuepress/plugin-shiki'\n *\n * export default {\n *   plugins: [\n *     shikiPlugin({\n *       langs: ['ts', 'json', 'vue', 'md', 'bash', 'diff'],\n *       theme: 'nord',\n *       lineNumbers: true,\n *     }),\n *   ],\n * }\n * ```\n */\nexport const shikiPlugin = (options: ShikiPluginOptions = {}): Plugin => {\n  return (app) => {\n    // FIXME: Remove in stable version\n    // eslint-disable-next-line @typescript-eslint/no-deprecated\n    const { code } = app.options.markdown\n    const shikiOptions = {\n      ...(isPlainObject(code) ? code : {}),\n      ...options,\n    }\n\n    shikiOptions.logLevel ??= app.env.isDebug ? 'debug' : 'warn'\n    shikiOptions.preWrapper ??= true\n    shikiOptions.lineNumbers ??= true\n    shikiOptions.collapsedLines ??= 'disable'\n    shikiOptions.codeBlockTitle ??= true\n\n    if (\n      shikiOptions.twoslash &&\n      !isModuleAvailable('@vuepress/shiki-twoslash', import.meta)\n    ) {\n      logger.error(\n        `${colors.cyan('twoslash')} is enabled, but ${colors.magenta('@vuepress/shiki-twoslash')} is not installed, please install it manually`,\n      )\n      shikiOptions.twoslash = false\n    }\n\n    /**\n     * Whether to enable the `v-pre` configuration of the code block\n     */\n    let enableVPre = true\n\n    return {\n      name: '@vuepress/plugin-shiki',\n\n      extendsMarkdownOptions: (opts) => {\n        /**\n         * Turn off the `v-pre` configuration of the code block.\n         */\n        if (opts.vPre !== false) {\n          const vPre = isPlainObject(opts.vPre) ? opts.vPre : { block: true }\n          if (vPre.block) {\n            opts.vPre ??= {}\n            opts.vPre.block = false\n          }\n          enableVPre = vPre.block ?? true\n        } else {\n          enableVPre = false\n        }\n      },\n\n      extendsMarkdown: async (md) => {\n        const { preWrapper, lineNumbers, collapsedLines, codeBlockTitle } =\n          shikiOptions\n\n        const markdownFilePathGetter = createMarkdownFilePathGetter(md)\n        const { highlighter, loadLang, extraTransformers } =\n          await createShikiHighlighter(app, shikiOptions, enableVPre)\n\n        md.options.highlight = getHighLightFunction(\n          highlighter,\n          shikiOptions,\n          extraTransformers,\n          loadLang,\n          markdownFilePathGetter,\n        )\n\n        md.use<MarkdownItPreWrapperOptions>(preWrapperPlugin, { preWrapper })\n        if (preWrapper) {\n          md.use<MarkdownItLineNumbersOptions>(lineNumbersPlugin, {\n            lineNumbers,\n            resolveLineNumbers(info) {\n              return shikiOptions.twoslash && TWOSLASH_RE.test(info)\n                ? false\n                : undefined\n            },\n          })\n          md.use<MarkdownItCollapsedLinesOptions>(collapsedLinesPlugin, {\n            collapsedLines,\n          })\n          md.use<MarkdownItCodeBlockTitleOptions>(codeBlockTitlePlugin, {\n            codeBlockTitle,\n          })\n        }\n      },\n\n      clientConfigFile: () => prepareClientConfigFile(app, shikiOptions),\n    }\n  }\n}\n"],"names":["createMarkdownFilePathGetter","md","store","rawRender","src","env","CODE_ESCAPE_RE","addClassTransformer","node","cleanupTransformer","removeEscapeTransformer","code","emptyLineTransformer","hast","span","vPreTransformer","VUE_RE","TWOSLASH_RE","PLUGIN_NAME","logger","Logger","nanoid","customAlphabet","resolveLanguage","info","attrsToLines","attrs","attrsContent","result","lineNumberConfig","lineNumber","start","end","_","i","line","require","createRequire","resolveLangSync","createSyncFn","createShikiHighlighter","app","langs","langAlias","defaultLang","shikiSetup","options","enableVPre","highlighter","createHighlighter","loadLang","lang","isSpecialLang","resolvedLang","rawGetLanguage","name","extraTransformers","createTwoslashTransformer","createFileSystemTypesCache","typesCache","twoslashOptions","isPlainObject","getTransformers","transformers","transformerNotationDiff","transformerNotationFocus","transformerNotationHighlight","transformerNotationErrorLevel","transformerNotationWordHighlight","transformerMetaWordHighlight","whitespaceTransformer","meta","globalOption","position","resolveWhitespacePosition","transformerRenderWhitespace","WARNED_LANGS","getLanguage","logLevel","markdownFilePathGetter","colors","MUSTACHE_REG","removeMustache","str","match","marker","restoreMustache","handleMustache","highlight","getHighLightFunction","content","language","transformerCompactLineOptions","PRE_ATTRS_REGEXP","preWrapperPlugin","preWrapper","rawFence","args","tokens","idx","token","languageClass","styles","before","style","after","prepareClientConfigFile","lineNumbers","highlightLines","collapsedLines","codeBlockTitle","notationDiff","notationErrorLevel","notationFocus","notationHighlight","notationWordHighlight","whitespace","twoslash","imports","getModulePath","enhances","setups","shikiPlugin","shikiOptions","isModuleAvailable","opts","vPre","lineNumbersPlugin","collapsedLinesPlugin","codeBlockTitlePlugin"],"mappings":"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"}