{"version":3,"file":"index.js","sources":["../src/deflate/node.ts","../src/customBase64.ts","../src/plugin.ts"],"sourcesContent":["import { deflateRawSync } from \"node:zlib\";\n\nexport const deflate = (data: string): string =>\n  deflateRawSync(Buffer.from(data, \"utf8\"), { level: 9 }).toString(\"binary\");\n","/**\n * @see https://plantuml.com/en/text-encoding\n *\n * PlantUML uses a custom Base64 encoding scheme for text data.\n */\nconst encode6bit = (byte: number): string =>\n  byte < 10\n    ? String.fromCharCode(48 + byte)\n    : byte < 36\n      ? String.fromCharCode(65 + byte - 10)\n      : byte < 62\n        ? String.fromCharCode(97 + byte - 36)\n        : byte === 62\n          ? \"-\"\n          : byte === 63\n            ? \"_\"\n            : \"?\";\n\nconst append3bytes = (b1: number, b2: number, b3: number): string => {\n  const c1 = b1 >> 2;\n  const c2 = ((b1 & 0x3) << 4) | (b2 >> 4);\n  const c3 = ((b2 & 0xf) << 2) | (b3 >> 6);\n  const c4 = b3 & 0x3f;\n\n  return (\n    encode6bit(c1 & 0x3f) +\n    encode6bit(c2 & 0x3f) +\n    encode6bit(c3 & 0x3f) +\n    encode6bit(c4 & 0x3f)\n  );\n};\n\n/**\n * Custom Base64 encoding for PlantUML\n *\n * Mapping: 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_\n *\n * @param data The input string to encode\n * @returns The Base64 encoded string\n */\nexport const customEncodeBase64 = (data: string): string => {\n  let result = \"\";\n\n  for (let i = 0; i < data.length; i += 3) {\n    if (i + 2 === data.length) {\n      result += append3bytes(data.charCodeAt(i), data.charCodeAt(i + 1), 0);\n    } else if (i + 1 === data.length) {\n      result += append3bytes(data.charCodeAt(i), 0, 0);\n    } else {\n      result += append3bytes(\n        data.charCodeAt(i),\n        data.charCodeAt(i + 1),\n        data.charCodeAt(i + 2),\n      );\n    }\n  }\n\n  return result;\n};\n","// eslint-disable-next-line import-x/no-unresolved\nimport { deflate } from \"@deflate\";\nimport { uml } from \"@mdit/plugin-uml\";\nimport type { Options, PluginWithOptions } from \"markdown-it\";\nimport type Renderer from \"markdown-it/lib/renderer.mjs\";\nimport type Token from \"markdown-it/lib/token.mjs\";\n\nimport { customEncodeBase64 } from \"./customBase64.js\";\nimport type { MarkdownItPlantumlOptions } from \"./options.js\";\n\nexport const plantuml: PluginWithOptions<MarkdownItPlantumlOptions> = (\n  md,\n  {\n    type = \"uml\",\n    name = \"uml\",\n    open = `start${name}`,\n    close = `end${name}`,\n    fence = name,\n    format = \"svg\",\n    server = \"https://www.plantuml.com/plantuml\",\n    srcGetter = (content: string): string =>\n      `${server}/${format}/${customEncodeBase64(\n        deflate(`@start${name}\\n${content.trim()}\\n@end${name}`),\n      )}`,\n    render = (\n      tokens: Token[],\n      index: number,\n      options: Options,\n      _env: unknown,\n      self: Renderer,\n    ): string => {\n      const token = tokens[index];\n      const { content, info = \"plantuml diagram\" } = token;\n\n      token.tag = \"img\";\n      token.attrPush([\"src\", srcGetter(content)]);\n      token.attrPush([\"alt\", info]);\n\n      return self.renderToken(tokens, index, options);\n    },\n  } = {},\n) => {\n  if (type === \"uml\") {\n    md.use(uml, {\n      name,\n      open,\n      close,\n      render,\n    });\n  } else {\n    // Handle ```name  blocks\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const fenceRender = md.renderer.rules.fence!;\n\n    md.renderer.rules.fence = (\n      tokens: Token[],\n      index: number,\n      options: Options,\n      env: unknown,\n      self: Renderer,\n    ): string => {\n      const token = tokens[index];\n\n      const [fenceName, alt] = token.info.split(\" \", 2);\n\n      if (fenceName === fence) {\n        token.info = alt;\n\n        return render(tokens, index, options, env, self);\n      }\n\n      return fenceRender(tokens, index, options, env, self);\n    };\n  }\n};\n"],"names":["deflate","data","deflateRawSync","encode6bit","byte","append3bytes","b1","b2","b3","c1","c2","c3","c4","customEncodeBase64","result","i","plantuml","md","type","name","open","close","fence","format","server","srcGetter","content","render","tokens","index","options","_env","self","token","info","uml","fenceRender","env","fenceName","alt"],"mappings":"wFAEaA,EAAWC,GACtBC,EAAe,OAAO,KAAKD,EAAM,MAAM,EAAG,CAAE,MAAO,CAAE,CAAC,EAAE,SAAS,QAAQ,ECErEE,EAAcC,GAClBA,EAAO,GACH,OAAO,aAAa,GAAKA,CAAI,EAC7BA,EAAO,GACL,OAAO,aAAa,GAAKA,EAAO,EAAE,EAClCA,EAAO,GACL,OAAO,aAAa,GAAKA,EAAO,EAAE,EAClCA,IAAS,GACP,IACAA,IAAS,GACP,IACA,IAERC,EAAe,CAACC,EAAYC,EAAYC,IAAuB,CACnE,MAAMC,EAAKH,GAAM,EACXI,GAAOJ,EAAK,IAAQ,EAAMC,GAAM,EAChCI,GAAOJ,EAAK,KAAQ,EAAMC,GAAM,EAChCI,EAAKJ,EAAK,GAEhB,OACEL,EAAWM,EAAK,EAAI,EACpBN,EAAWO,EAAK,EAAI,EACpBP,EAAWQ,EAAK,EAAI,EACpBR,EAAWS,EAAK,EAAI,CAExB,EAUaC,EAAsBZ,GAAyB,CAC1D,IAAIa,EAAS,GAEb,QAASC,EAAI,EAAGA,EAAId,EAAK,OAAQc,GAAK,EAChCA,EAAI,IAAMd,EAAK,OACjBa,GAAUT,EAAaJ,EAAK,WAAWc,CAAC,EAAGd,EAAK,WAAWc,EAAI,CAAC,EAAG,CAAC,EAC3DA,EAAI,IAAMd,EAAK,OACxBa,GAAUT,EAAaJ,EAAK,WAAWc,CAAC,EAAG,EAAG,CAAC,EAE/CD,GAAUT,EACRJ,EAAK,WAAWc,CAAC,EACjBd,EAAK,WAAWc,EAAI,CAAC,EACrBd,EAAK,WAAWc,EAAI,CAAC,CACvB,EAIJ,OAAOD,CACT,EChDaE,EAAyD,CACpEC,EACA,CACE,KAAAC,EAAO,MACP,KAAAC,EAAO,MACP,KAAAC,EAAO,QAAQD,CAAI,GACnB,MAAAE,EAAQ,MAAMF,CAAI,GAClB,MAAAG,EAAQH,EACR,OAAAI,EAAS,MACT,OAAAC,EAAS,oCACT,UAAAC,EAAaC,GACX,GAAGF,CAAM,IAAID,CAAM,IAAIV,EACrBb,EAAQ,SAASmB,CAAI;AAAA,EAAKO,EAAQ,MAAM;AAAA,MAASP,CAAI,EAAE,CACzD,CAAC,GACH,OAAAQ,EAAS,CACPC,EACAC,EACAC,EACAC,EACAC,IACW,CACX,MAAMC,EAAQL,EAAOC,CAAK,EACpB,CAAE,QAAAH,EAAS,KAAAQ,EAAO,kBAAmB,EAAID,EAE/C,OAAAA,EAAM,IAAM,MACZA,EAAM,SAAS,CAAC,MAAOR,EAAUC,CAAO,CAAC,CAAC,EAC1CO,EAAM,SAAS,CAAC,MAAOC,CAAI,CAAC,EAErBF,EAAK,YAAYJ,EAAQC,EAAOC,CAAO,CAChD,CACF,EAAI,CAAA,IACD,CACH,GAAIZ,IAAS,MACXD,EAAG,IAAIkB,EAAK,CACV,KAAAhB,EACA,KAAAC,EACA,MAAAC,EACA,OAAAM,CACF,CAAC,MACI,CAGL,MAAMS,EAAcnB,EAAG,SAAS,MAAM,MAEtCA,EAAG,SAAS,MAAM,MAAQ,CACxBW,EACAC,EACAC,EACAO,EACAL,IACW,CACX,MAAMC,EAAQL,EAAOC,CAAK,EAEpB,CAACS,EAAWC,CAAG,EAAIN,EAAM,KAAK,MAAM,IAAK,CAAC,EAEhD,OAAIK,IAAchB,GAChBW,EAAM,KAAOM,EAENZ,EAAOC,EAAQC,EAAOC,EAASO,EAAKL,CAAI,GAG1CI,EAAYR,EAAQC,EAAOC,EAASO,EAAKL,CAAI,CACtD,CACF,CACF"}