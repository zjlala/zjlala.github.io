{"version":3,"file":"index.js","sources":["../src/plugin.ts"],"sourcesContent":["import type { PluginWithOptions } from \"markdown-it\";\nimport type { RuleBlock } from \"markdown-it/lib/parser_block.mjs\";\nimport type Token from \"markdown-it/lib/token.mjs\";\n\nimport type { MarkdownItDemoOptions } from \"./options.js\";\n\nconst MIN_MARKER_NUM = 3;\n\nexport const demo: PluginWithOptions<MarkdownItDemoOptions> = (\n  md,\n  {\n    name = \"demo\",\n    openRender = (tokens: Token[], index: number): string =>\n      `<details><summary>${tokens[index].info}</summary>\\n`,\n    closeRender = (): string => \"</details>\\n\",\n    codeRender,\n    contentOpenRender,\n    contentCloseRender,\n    showCodeFirst = false,\n  } = {},\n) => {\n  const demoRule: RuleBlock = (state, startLine, endLine, silent) => {\n    const currentLineStart = state.bMarks[startLine] + state.tShift[startLine];\n    const currentLineMax = state.eMarks[startLine];\n    const currentLineIndent = state.sCount[startLine];\n\n    if (state.src.charCodeAt(currentLineStart) !== 58 /* : */) return false;\n\n    // check the minimal length of container\n    if (currentLineMax - currentLineStart < MIN_MARKER_NUM + name.length)\n      return false;\n\n    let pos = currentLineStart + 1;\n\n    // Check out the rest of the marker string\n    while (pos <= currentLineMax) {\n      if (state.src.charCodeAt(pos) !== 58 /* : */) break;\n      pos++;\n    }\n\n    const markerCount = pos - currentLineStart;\n\n    if (markerCount < MIN_MARKER_NUM) return false;\n\n    pos = state.skipSpaces(pos);\n\n    // check name is matched\n    for (let i = 0; i < name.length; i++) {\n      if (state.src.charCodeAt(pos) !== name.charCodeAt(i)) return false;\n      pos++;\n    }\n\n    const nameEnd = pos;\n\n    const titleEnd = state.skipSpacesBack(currentLineMax, pos);\n    const hasTitle = titleEnd > nameEnd;\n    let titleStart = -1;\n\n    if (hasTitle) {\n      titleStart = state.skipSpaces(nameEnd);\n      if (titleStart === nameEnd) return false;\n    }\n\n    // Since start is found, we can report success here in validation mode\n    if (silent) return true;\n\n    let nextLine = startLine + 1;\n    let autoClosed = false;\n\n    // Search for the end of the block\n    for (\n      ;\n      // nextLine should be accessible outside the loop,\n      // unclosed block should be auto closed by end of document.\n      // also block seems to be auto closed by end of parent\n      nextLine < endLine;\n      nextLine++\n    ) {\n      const nextLineStart = state.bMarks[nextLine] + state.tShift[nextLine];\n      const nextLineMax = state.eMarks[nextLine];\n\n      if (\n        nextLineStart < nextLineMax &&\n        state.sCount[nextLine] < currentLineIndent\n      )\n        // non-empty line with negative indent should stop the list:\n        // - :::\n        //  test\n        break;\n\n      if (\n        // closing fence should be indented same as opening one\n        state.sCount[nextLine] === currentLineIndent &&\n        // match start\n        state.src.charCodeAt(nextLineStart) === 58 /* : */\n      ) {\n        // check rest of marker\n        for (pos = nextLineStart + 1; pos <= nextLineMax; pos++)\n          if (state.src.charCodeAt(pos) !== 58 /* : */) break;\n\n        // closing code fence must be at least as long as the opening one\n        if (pos - nextLineStart >= markerCount) {\n          // make sure tail has spaces only\n          pos = state.skipSpaces(pos);\n\n          if (pos >= nextLineMax) {\n            // found!\n            autoClosed = true;\n            break;\n          }\n        }\n      }\n    }\n\n    const oldParent = state.parentType;\n    const oldLineMax = state.lineMax;\n    const oldBlkIndent = state.blkIndent;\n\n    // @ts-expect-error We are creating a new type called \"demo\"\n    state.parentType = \"demo\";\n\n    // this will prevent lazy continuations from ever going past our end marker\n    state.lineMax = nextLine;\n\n    // this will update the block indent\n    state.blkIndent = currentLineIndent;\n\n    const markup = \":\".repeat(markerCount);\n    const title = hasTitle ? state.src.slice(titleStart, titleEnd) : \"Demo\";\n    const openToken = state.push(`${name}_demo_open`, \"div\", 1);\n\n    openToken.markup = markup;\n    openToken.block = true;\n    openToken.info = title;\n    openToken.map = [startLine, nextLine];\n\n    const pushCodeToken = (): void => {\n      const codeToken = state.push(\n        codeRender ? `${name}_demo_code` : \"fence\",\n        \"code\",\n        0,\n      );\n\n      const indent = state.sCount[startLine];\n\n      codeToken.content = state.src\n        .split(/\\n\\r?/)\n        .slice(startLine + 1, nextLine)\n        .map((line) => line.slice(indent))\n        // this is a workaround to work with include plugin\n        .filter(\n          (line) => !/^<!-- #include-env-(?:start: .*|end) -->$/.test(line),\n        )\n        .join(\"\\n\")\n        .replace(/^\\n+/, \"\")\n        .replace(/\\n*$/, \"\\n\");\n      codeToken.map = [startLine, state.line];\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      (codeToken.meta ??= {}).title = title;\n      if (!codeRender) codeToken.info = \"md\";\n    };\n\n    if (showCodeFirst) pushCodeToken();\n\n    const contentOpenToken = state.push(`${name}_demo_content_open`, \"div\", 1);\n\n    contentOpenToken.attrPush([\"class\", \"demo-content\"]);\n    contentOpenToken.block = true;\n    openToken.map = [startLine, nextLine];\n\n    state.md.block.tokenize(state, startLine + 1, nextLine);\n\n    const contentCloseToken = state.push(\n      `${name}_demo_content_close`,\n      \"div\",\n      -1,\n    );\n\n    contentCloseToken.block = true;\n\n    if (!showCodeFirst) pushCodeToken();\n\n    const closeToken = state.push(`${name}_demo_close`, \"div\", -1);\n\n    closeToken.markup = markup;\n    closeToken.block = true;\n    closeToken.info = title;\n\n    state.parentType = oldParent;\n    state.lineMax = oldLineMax;\n    state.blkIndent = oldBlkIndent;\n    state.line = nextLine + (autoClosed ? 1 : 0);\n\n    return true;\n  };\n\n  md.block.ruler.before(\"fence\", \"demo\", demoRule, {\n    alt: [\"paragraph\", \"reference\", \"blockquote\", \"list\"],\n  });\n  md.renderer.rules[`${name}_demo_open`] = openRender;\n  md.renderer.rules[`${name}_demo_close`] = closeRender;\n  if (codeRender) md.renderer.rules[`${name}_demo_code`] = codeRender;\n  if (contentOpenRender)\n    md.renderer.rules[`${name}_demo_content_open`] = contentOpenRender;\n  if (contentCloseRender)\n    md.renderer.rules[`${name}_demo_content_close`] = contentCloseRender;\n};\n"],"names":["demo","md","name","openRender","tokens","index","closeRender","codeRender","contentOpenRender","contentCloseRender","showCodeFirst","demoRule","state","startLine","endLine","silent","currentLineStart","currentLineMax","currentLineIndent","pos","markerCount","i","nameEnd","titleEnd","hasTitle","titleStart","nextLine","autoClosed","nextLineStart","nextLineMax","oldParent","oldLineMax","oldBlkIndent","markup","title","openToken","pushCodeToken","codeToken","indent","line","contentOpenToken","contentCloseToken","closeToken"],"mappings":"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"}