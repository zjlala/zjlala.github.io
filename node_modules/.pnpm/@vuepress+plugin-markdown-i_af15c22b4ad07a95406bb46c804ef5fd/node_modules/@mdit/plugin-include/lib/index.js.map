{"version":3,"file":"index.js","sources":["../src/plugin.ts"],"sourcesContent":["import fs from \"node:fs\";\n\nimport { NEWLINE_RE, dedent } from \"@mdit/helper\";\nimport type { PluginWithOptions } from \"markdown-it\";\nimport type { RuleBlock } from \"markdown-it/lib/parser_block.mjs\";\nimport type { RuleCore } from \"markdown-it/lib/parser_core.mjs\";\nimport type Token from \"markdown-it/lib/token.mjs\";\nimport path from \"upath\";\n\nimport type { MarkdownItIncludeOptions } from \"./options.js\";\nimport type { IncludeEnv } from \"./types.js\";\n\ninterface ImportFileLineInfo {\n  filePath: string;\n  lineStart?: number;\n  lineEnd?: number;\n}\n\ninterface ImportFileRegionInfo {\n  filePath: string;\n  region: string;\n}\n\ntype ImportFileInfo = ImportFileLineInfo | ImportFileRegionInfo;\n\ninterface IncludeInfo {\n  cwd: string | null;\n  includedFiles: string[];\n  resolvedPath?: boolean;\n}\n\nconst REGIONS_RE = [\n  /^\\/\\/ ?#?((?:end)?region) ([\\w*-]+)$/, // javascript, typescript, java\n  /^\\/\\* ?#((?:end)?region) ([\\w*-]+) ?\\*\\/$/, // css, less, scss\n  /^#pragma ((?:end)?region) ([\\w*-]+)$/, // C, C++\n  /^<!-- #?((?:end)?region) ([\\w*-]+) -->$/, // HTML, markdown\n  /^#((?:End )Region) ([\\w*-]+)$/, // Visual Basic\n  /^::#((?:end)region) ([\\w*-]+)$/, // Bat\n  /^# ?((?:end)?region) ([\\w*-]+)$/, // C#, PHP, Powershell, Python, perl & misc\n];\n\n// regexp to match the import syntax\nconst INCLUDE_COMMENT_RE =\n  /^( *)<!-{2,}\\s*@include:\\s*([^<>|:\"*?]+(?:\\.[a-z0-9]+))(?:#([\\w-]+))?(?:\\{(\\d+)?-(\\d+)?\\})?\\s*-{2,}>\\s*$/gm;\nconst INCLUDE_RE =\n  /^( *)@include:\\s*([^<>|:\"*?]+(?:\\.[a-z0-9]+))(?:#([\\w-]+))?(?:\\{(\\d+)?-(\\d+)?\\})?\\s*$/gm;\n\nconst testLine = (\n  line: string,\n  regexp: RegExp,\n  regionName: string,\n  end = false,\n): boolean => {\n  const [full, tag, name] = regexp.exec(line.trim()) ?? [];\n\n  return Boolean(\n    full &&\n      tag &&\n      name === regionName &&\n      tag.match(end ? /^[Ee]nd ?[rR]egion$/ : /^[rR]egion$/),\n  );\n};\n\nconst findRegion = (\n  lines: string[],\n  regionName: string,\n): { lineStart: number; lineEnd: number } | null => {\n  let regexp = null;\n  let lineStart = -1;\n\n  for (const [lineId, line] of lines.entries())\n    if (regexp === null) {\n      for (const reg of REGIONS_RE)\n        if (testLine(line, reg, regionName)) {\n          lineStart = lineId + 1;\n          regexp = reg;\n          break;\n        }\n    } else if (testLine(line, regexp, regionName, true)) {\n      return { lineStart, lineEnd: lineId };\n    }\n\n  return null;\n};\n\nexport const handleInclude = (\n  info: ImportFileInfo,\n  { cwd, includedFiles, resolvedPath }: IncludeInfo,\n): string => {\n  const { filePath } = info;\n  let realPath = filePath;\n\n  if (!path.isAbsolute(filePath)) {\n    // if the importPath is relative path, we need to resolve it\n    // according to the markdown filePath\n    if (!cwd) {\n      console.error(\n        `[@mdit/plugin-include]: Error when resolving path: ${filePath}`,\n      );\n\n      return \"\\nError when resolving path\\n\";\n    }\n\n    realPath = path.resolve(cwd, filePath);\n  }\n\n  includedFiles.push(realPath);\n\n  // check file existence\n  if (!fs.existsSync(realPath)) {\n    console.error(`[@mdit/plugin-include]: ${realPath} not found`);\n\n    return \"\\nFile not found\\n\";\n  }\n\n  // read file content\n  const fileContent = fs.readFileSync(realPath).toString();\n\n  const lines = fileContent.replace(NEWLINE_RE, \"\\n\").split(\"\\n\");\n  let results: string[] = [];\n\n  // is region\n  if (\"region\" in info) {\n    const region = findRegion(lines, info.region);\n\n    if (region) results = lines.slice(region.lineStart, region.lineEnd);\n  }\n  // is file\n  else {\n    const { lineStart, lineEnd } = info;\n\n    if (lineStart) {\n      results = lines.slice(lineStart - 1, lineEnd);\n    } else if (lines[0] === \"---\") {\n      const endLineIndex = lines.findIndex(\n        (line, index) => index !== 0 && line === \"---\",\n      );\n\n      results = lines.slice(Math.max(endLineIndex + 1, 1), lineEnd);\n    } else {\n      results = lines.slice(0, lineEnd);\n    }\n  }\n\n  if (resolvedPath && realPath.endsWith(\".md\")) {\n    const dirName = path.dirname(realPath);\n\n    results.unshift(`<!-- #include-env-start: ${dirName} -->`);\n    results.push(\"<!-- #include-env-end -->\");\n  }\n\n  return dedent(results.join(\"\\n\").replace(/\\n?$/, \"\\n\"));\n};\n\nexport const resolveInclude = (\n  content: string,\n  options: Required<MarkdownItIncludeOptions>,\n  { cwd, includedFiles }: IncludeInfo,\n): string =>\n  content.replace(\n    options.useComment ? INCLUDE_COMMENT_RE : INCLUDE_RE,\n    (\n      _,\n      indent: string,\n      includePath: string,\n      region?: string,\n      lineStart?: string,\n      lineEnd?: string,\n    ) => {\n      const actualPath = options.resolvePath(includePath, cwd);\n      const resolvedPath = options.resolveImagePath || options.resolveLinkPath;\n\n      const content = handleInclude(\n        {\n          filePath: actualPath,\n          ...(region\n            ? { region }\n            : {\n                ...(lineStart ? { lineStart: Number(lineStart) } : {}),\n                ...(lineEnd ? { lineEnd: Number(lineEnd) } : {}),\n              }),\n        },\n        { cwd, includedFiles, resolvedPath },\n      );\n\n      return (\n        options.deep && actualPath.endsWith(\".md\")\n          ? resolveInclude(content, options, {\n              cwd: path.isAbsolute(actualPath)\n                ? path.dirname(actualPath)\n                : cwd\n                  ? path.resolve(cwd, path.dirname(actualPath))\n                  : null,\n              includedFiles,\n            })\n          : content\n      )\n        .split(\"\\n\")\n        .map((line) => indent + line)\n        .join(\"\\n\");\n    },\n  );\n\nconst SYNTAX_PUSH_RE = /^<!-- #include-env-start: ([^)]*?) -->$/;\n\nconst includePushRule: RuleBlock = (state, startLine, _, silent): boolean => {\n  const start = state.bMarks[startLine] + state.tShift[startLine];\n  const max = state.eMarks[startLine];\n\n  const content = state.src.slice(start, max);\n\n  if (content.startsWith(\"<!-- #include-env-start: \")) {\n    // check if itâ€™s matched the syntax\n    const match = SYNTAX_PUSH_RE.exec(content);\n\n    if (match) {\n      if (silent) return true;\n\n      const [, includePath] = match;\n\n      state.line = startLine + 1;\n      const token = state.push(\"include_start\", \"\", 0);\n\n      token.map = [startLine, state.line];\n      token.info = includePath;\n      token.markup = \"include_start\";\n\n      return true;\n    }\n  }\n\n  return false;\n};\n\nconst includePopRule: RuleBlock = (\n  state,\n  startLine,\n  _endLine,\n  silent,\n): boolean => {\n  const start = state.bMarks[startLine] + state.tShift[startLine];\n  const max = state.eMarks[startLine];\n\n  if (state.src.slice(start, max) === \"<!-- #include-env-end -->\") {\n    if (silent) return true;\n\n    state.line = startLine + 1;\n\n    const token = state.push(\"include_end\", \"\", 0);\n\n    token.map = [startLine, state.line];\n    token.markup = \"include_end\";\n\n    return true;\n  }\n\n  return false;\n};\n\nconst resolveRelatedLink = (\n  attr: string,\n  token: Token,\n  filePath: string,\n  includedPaths?: string[],\n): void => {\n  const attrIndex = token.attrIndex(attr);\n  const url = token.attrs?.[attrIndex][1];\n\n  if (url?.[0] === \".\" && Array.isArray(includedPaths)) {\n    const { length } = includedPaths;\n\n    if (length) {\n      const includeDir = path.relative(\n        path.dirname(filePath),\n        includedPaths[length - 1],\n      );\n\n      const resolvedPath = path.join(includeDir, url);\n\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      token.attrs![attrIndex][1] =\n        resolvedPath[0] === \".\" ? resolvedPath : `./${resolvedPath}`;\n    }\n  }\n};\n\nexport const include: PluginWithOptions<MarkdownItIncludeOptions> = (\n  md,\n  options,\n): void => {\n  const {\n    currentPath,\n    resolvePath = (path: string): string => path,\n    deep = false,\n    resolveLinkPath = true,\n    resolveImagePath = true,\n    useComment = true,\n  } = options ?? {};\n\n  if (typeof currentPath !== \"function\") {\n    throw new Error('[@mdit/plugin-include]: \"currentPath\" is required');\n  }\n\n  const includeRule: RuleCore = (state): void => {\n    const env = state.env as IncludeEnv;\n    const includedFiles = (env.includedFiles ??= []);\n    const filePath = currentPath(env);\n\n    state.src = resolveInclude(\n      state.src,\n      {\n        currentPath,\n        resolvePath,\n        deep,\n        resolveLinkPath,\n        resolveImagePath,\n        useComment,\n      },\n      {\n        cwd: filePath ? path.dirname(filePath) : null,\n        includedFiles,\n      },\n    );\n  };\n\n  // add md_import core rule\n  md.core.ruler.after(\"normalize\", \"md_import\", includeRule);\n\n  if (resolveImagePath || resolveLinkPath) {\n    md.block.ruler.before(\"table\", \"md_include_start\", includePushRule, {\n      alt: [\"paragraph\", \"reference\", \"blockquote\", \"list\"],\n    });\n    md.block.ruler.before(\"table\", \"md_include_end\", includePopRule, {\n      alt: [\"paragraph\", \"reference\", \"blockquote\", \"list\"],\n    });\n\n    md.renderer.rules.include_start = (\n      tokens,\n      index,\n      _options,\n      env: IncludeEnv,\n    ): string => {\n      const token = tokens[index];\n      const includedPaths = (env.includedPaths ??= []);\n\n      includedPaths.push(token.info);\n\n      return \"\";\n    };\n\n    md.renderer.rules.include_end = (\n      _tokens,\n      _index,\n      _options,\n      env: IncludeEnv,\n    ): string => {\n      const includedPaths = env.includedPaths;\n\n      /* istanbul ignore else -- @preserve */\n      if (Array.isArray(includedPaths)) includedPaths.pop();\n      else\n        console.error(\n          `[@mdit/plugin-include]: include_end failed, no include_start.`,\n        );\n\n      return \"\";\n    };\n\n    if (resolveImagePath) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const defaultImageRender = md.renderer.rules.image!;\n\n      md.renderer.rules.image = (\n        tokens,\n        index,\n        options,\n        env: IncludeEnv,\n        self,\n      ): string => {\n        const token = tokens[index];\n        const path = currentPath(env);\n\n        if (path) resolveRelatedLink(\"src\", token, path, env.includedPaths);\n\n        // pass token to default renderer.\n        return defaultImageRender(tokens, index, options, env, self);\n      };\n    }\n\n    if (resolveLinkPath) {\n      const defaultLinkRender =\n        md.renderer.rules.link_open ??\n        ((tokens, index, options, _env, self): string =>\n          self.renderToken(tokens, index, options));\n\n      md.renderer.rules.link_open = (\n        tokens,\n        index,\n        options,\n        env: IncludeEnv,\n        self,\n      ): string => {\n        const token = tokens[index];\n        const path = currentPath(env);\n\n        if (path) resolveRelatedLink(\"href\", token, path, env.includedPaths);\n\n        // pass token to default renderer.\n        return defaultLinkRender(tokens, index, options, env, self);\n      };\n    }\n  }\n};\n"],"names":["REGIONS_RE","INCLUDE_COMMENT_RE","INCLUDE_RE","testLine","line","regexp","regionName","end","full","tag","name","findRegion","lines","lineStart","lineId","reg","handleInclude","info","cwd","includedFiles","resolvedPath","filePath","realPath","path","fs","NEWLINE_RE","results","region","lineEnd","endLineIndex","index","dirName","dedent","resolveInclude","content","options","_","indent","includePath","actualPath","SYNTAX_PUSH_RE","includePushRule","state","startLine","silent","start","max","match","token","includePopRule","_endLine","resolveRelatedLink","attr","includedPaths","attrIndex","url","length","includeDir","include","md","currentPath","resolvePath","deep","resolveLinkPath","resolveImagePath","useComment","includeRule","env","tokens","_options","_tokens","_index","defaultImageRender","self","defaultLinkRender","_env"],"mappings":"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"}