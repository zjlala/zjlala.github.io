import{escapeHtml as s}from"@mdit/helper";import{tex as u}from"@mdit/plugin-tex";let p=!0,n;try{n=await import("katex")}catch{/* istanbul ignore next -- @preserve */p=!1}const y=(t,o,a)=>{let r;try{r=n.renderToString(t,{...o,displayMode:!1})}catch(e){/* istanbul ignore else -- @preserve */if(e instanceof n.ParseError)console.error(e),r=`<span class='katex-error' title='${s(e.toString())}'>${s(t)}</span>`;else throw e}return a?.(r,!1)??r},S=(t,o,a)=>{let r;try{r=`<p class='katex-block'>${n.renderToString(t,{...o,displayMode:!0})}</p>
`}catch(e){/* istanbul ignore else -- @preserve */if(e instanceof n.ParseError)console.error(e),r=`<p class='katex-block katex-error' title='${s(e.toString())}'>${s(t)}</p>
`;else throw e}return a?.(r,!0)??r},$=async()=>{await import("katex/contrib/mhchem")},E=(t,o={})=>{/* istanbul ignore if -- @preserve */if(!p)throw new Error('[@mdit/plugin-katex]: "katex" not installed!');const{allowInlineWithSpace:a=!1,delimiters:r,mathFence:e,logger:m=l=>l==="newLineInDisplayMode"?"ignore":"warn",macros:d={},transformer:i,...h}=o;t.use(u,{allowInlineWithSpace:a,delimiters:r,mathFence:e,render:(l,f,w)=>{const c={strict:(k,g,x)=>m(k,g,x,w)??"ignore",macros:d,throwOnError:!1,...h};return f?S(l,c,i):y(l,c,i)}})};export{E as katex,$ as loadMhchem};
//# sourceMappingURL=index.js.map
