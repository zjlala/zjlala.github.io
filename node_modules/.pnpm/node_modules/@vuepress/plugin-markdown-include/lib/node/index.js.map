{"version":3,"file":"index.js","sources":["../../src/node/markdownIncludePlugin.ts"],"sourcesContent":["import type { IncludeEnv } from '@mdit/plugin-include'\nimport { include } from '@mdit/plugin-include'\nimport type { RuleCore } from 'markdown-it/lib/parser_core.mjs'\nimport type { Plugin } from 'vuepress/core'\nimport type { MarkdownEnv } from 'vuepress/markdown'\nimport { path } from 'vuepress/utils'\nimport type { MarkdownIncludePluginOptions } from './options.js'\n\n/**\n * Markdown include plugin\n *\n * Markdown 导入插件\n *\n * @param options - Plugin options / 插件选项\n *\n * @example\n * ```ts\n * import { markdownIncludePlugin } from '@vuepress/plugin-markdown-include'\n *\n * export default {\n *   plugins: [\n *     markdownIncludePlugin({\n *       deep: true,\n *       useComment: true,\n *     }),\n *   ],\n * }\n * ```\n */\nexport const markdownIncludePlugin =\n  (options: MarkdownIncludePluginOptions): Plugin =>\n  (app) => {\n    const source = app.dir.source()\n\n    return {\n      name: '@vuepress/plugin-markdown-include',\n\n      extendsMarkdown: (md) => {\n        md.use(include, {\n          currentPath: (env: MarkdownEnv) => env.filePath,\n          ...options,\n        })\n\n        // @ts-expect-error: __rules__ is private\n        const coreRules = md.core.ruler.__rules__ as {\n          name: string\n          enabled: boolean\n          fn: RuleCore\n          alt: string[]\n        }[]\n\n        const originalImportRule = coreRules.find(\n          (rule) => rule.name === 'md_import',\n        )!.fn\n\n        // replace the original import rule to add included files as page deps\n        md.core.ruler.at('md_import', (state) => {\n          originalImportRule(state)\n\n          const env = state.env as IncludeEnv & MarkdownEnv\n          const { includedFiles = [], filePathRelative } = env\n\n          if (includedFiles.length) {\n            ;(((env.frontmatter ??= {}).gitInclude as string[] | undefined) ??=\n              []).push(\n              ...includedFiles.map((file) =>\n                path.relative(\n                  path.resolve(source, filePathRelative, '..'),\n                  path.resolve(source, filePathRelative, file),\n                ),\n              ),\n            )\n          }\n        })\n      },\n      extendsPage: ({ deps, markdownEnv }): void => {\n        const { includedFiles = [] } = markdownEnv as IncludeEnv\n\n        // mark included files as page deps\n        deps.push(...includedFiles)\n      },\n    }\n  }\n"],"names":["markdownIncludePlugin","options","app","source","md","include","env","originalImportRule","rule","state","includedFiles","filePathRelative","file","path","deps","markdownEnv"],"mappings":"qFA6BO,MAAMA,EACVC,GACAC,GAAQ,CACP,MAAMC,EAASD,EAAI,IAAI,OAAA,EAEvB,MAAO,CACL,KAAM,oCAEN,gBAAkBE,GAAO,CACvBA,EAAG,IAAIC,EAAS,CACd,YAAcC,GAAqBA,EAAI,SACvC,GAAGL,CACL,CAAC,EAUD,MAAMM,EAPYH,EAAG,KAAK,MAAM,UAOK,KAClCI,GAASA,EAAK,OAAS,WAC1B,EAAG,GAGHJ,EAAG,KAAK,MAAM,GAAG,YAAcK,GAAU,CACvCF,EAAmBE,CAAK,EAExB,MAAMH,EAAMG,EAAM,IACZ,CAAE,cAAAC,EAAgB,CAAA,EAAI,iBAAAC,CAAiB,EAAIL,EAE7CI,EAAc,UACZJ,EAAI,cAAgB,CAAA,GAAI,aAC1B,IAAI,KACJ,GAAGI,EAAc,IAAKE,GACpBC,EAAK,SACHA,EAAK,QAAQV,EAAQQ,EAAkB,IAAI,EAC3CE,EAAK,QAAQV,EAAQQ,EAAkBC,CAAI,CAC7C,CACF,CACF,CAEJ,CAAC,CACH,EACA,YAAa,CAAC,CAAE,KAAAE,EAAM,YAAAC,CAAY,IAAY,CAC5C,KAAM,CAAE,cAAAL,EAAgB,CAAA,CAAG,EAAIK,EAG/BD,EAAK,KAAK,GAAGJ,CAAa,CAC5B,CACF,CACF"}