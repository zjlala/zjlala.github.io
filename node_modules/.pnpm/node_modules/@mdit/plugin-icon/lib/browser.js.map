{"version":3,"file":"browser.js","sources":["../src/plugin.ts","../../helper/lib/index.js","../src/utils.ts","../src/render.ts"],"sourcesContent":["import type { PluginWithOptions } from \"markdown-it\";\nimport type { RuleInline } from \"markdown-it/lib/parser_inline.mjs\";\n\nimport type { MarkdownItIconOptions } from \"./options.js\";\n\nconst iconRule: RuleInline = (state, silent) => {\n  let found = false;\n  const max = state.posMax;\n  const start = state.pos;\n\n  // ::xxx\n  // ^^\n  if (\n    state.src.charCodeAt(start) !== 0x3a ||\n    state.src.charCodeAt(start + 1) !== 0x3a\n  )\n    return false;\n\n  const next = state.src.charCodeAt(start + 2);\n\n  // :: xxx  |  :::xxx\n  //   ^     |    ^\n  if (next === 0x20 || next === 0x3a) return false;\n\n  if (silent) return false;\n\n  // ::::\n  if (max - start < 5) return false;\n\n  state.pos = start + 2;\n\n  while (state.pos < max) {\n    // ::xxx::\n    //      ^^\n    if (\n      state.src.charCodeAt(state.pos) === 0x3a &&\n      state.src.charCodeAt(state.pos + 1) === 0x3a\n    ) {\n      found = true;\n      break;\n    }\n\n    state.md.inline.skipToken(state);\n  }\n\n  if (\n    !found ||\n    start + 2 === state.pos ||\n    // ::xxx ::\n    //      ^\n    state.src.charCodeAt(state.pos - 1) === 0x20\n  ) {\n    state.pos = start;\n\n    return false;\n  }\n\n  const info = state.src.slice(start + 2, state.pos);\n\n  // found\n  state.posMax = state.pos;\n  state.pos = start + 2;\n\n  const icon = state.push(\"icon\", \"i\", 0);\n\n  icon.markup = \"::\";\n  icon.content = info;\n\n  state.pos = state.posMax + 2;\n  state.posMax = max;\n\n  return true;\n};\n\nexport const icon: PluginWithOptions<MarkdownItIconOptions> = (\n  md,\n  { render = (content: string): string => `<i class=\"${content}\"></i>` } = {},\n) => {\n  md.inline.ruler.before(\"link\", \"icon\", iconRule);\n  md.renderer.rules.icon = (tokens, idx, _, env): string =>\n    render(tokens[idx].content, env);\n};\n","const l=e=>{const n=e.split(`\n`),p=n.reduce((r,c)=>{for(let t=0;t<c.length;t++)if(c[t]!==\" \"&&c[t]!==\"\t\")return Math.min(t,r);return r},1/0);return p<1/0?n.map(r=>r.slice(p)).join(`\n`):e},a=e=>e.replace(/&/gu,\"&amp;\").replace(/</gu,\"&lt;\").replace(/>/gu,\"&gt;\").replace(/\"/gu,\"&quot;\").replace(/'/gu,\"&#39;\"),g=e=>e.replace(/[-/\\\\^$*+?.()|[\\]{}]/g,\"\\\\$&\"),u=/\\r\\n?|\\n/g,s=/\\\\([ \\\\!\"#$%&'()*+,./:;<=>?@[\\]^_`{|}~-])/gu;export{u as NEWLINE_RE,s as UNESCAPE_RE,l as dedent,a as escapeHtml,g as escapeRegExp};\n//# sourceMappingURL=index.js.map\n","import { escapeHtml } from \"@mdit/helper\";\n\nconst SIZE_REGEXP = /(?<=\\s|^)=(.+?)(?:\\s|$)/;\n\n/**\n * Extract size from content\n */\nexport const extractSize = <T extends { content: string }>(\n  data: T & { size?: string },\n): T & { size?: string } => {\n  let size = \"\";\n\n  data.content = data.content\n    .replace(SIZE_REGEXP, (_, match: string) => {\n      size = match;\n\n      return \"\";\n    })\n    .trim();\n\n  if (size) data.size = Number.isNaN(Number(size)) ? size : `${size}px`;\n\n  return data;\n};\n\nconst COLOR_REGEXP = /(?<=\\s|^)\\/(.+?)(?:\\s|$)/;\n\n/**\n * Extract color from content\n */\nexport const extractColor = <T extends { content: string }>(\n  data: T & { color?: string },\n): T & { color?: string } => {\n  let color = \"\";\n\n  data.content = data.content\n    .replace(COLOR_REGEXP, (_, match: string) => {\n      color = match;\n\n      return \"\";\n    })\n    .trim();\n\n  if (color) data.color = color;\n\n  return data;\n};\n\nexport type AttrsInfo = Record<string, string>;\n\nconst ATTR_NAME_REGEXP = \"[A-z_][a-zA-Z0-9_-]*\";\n\nconst ATTR_REGEXP = new RegExp(\n  `\\\\b` +\n    // attr name\n    `(?<attr>${ATTR_NAME_REGEXP})` +\n    // =\n    \"=\" +\n    // attr value, should match on of the following\n    `(?:` +\n    /**\n     * case 1: value with quotes\n     */\n    //   starting quote\n    /**/ `(?<quote>['\"])` +\n    //   value capture group\n    /**/ `(?<valueWithQuotes>` +\n    /*  */ `(?:` +\n    //      any character\n    /*    */ `.` +\n    //      negative lookahead for one of the following\n    /*    */ `(?!` +\n    //      case 1: ending and starting another attr\n    /*      */ `\\\\k<quote>\\\\s+(?:${ATTR_NAME_REGEXP})=` +\n    /*      */ `|` +\n    //      case 2: an escaped quote\n    /*      */ `(?<!\\\\\\\\)\\\\k<quote>` +\n    /*    */ `)` +\n    /*  */ `)+.` +\n    /**/ `)` +\n    //   ending with same quote\n    /**/ `\\\\k<quote>` +\n    /**/ \"|\" +\n    /**\n     * case 2: empty values\n     */\n    /**/ `(?<emptyValue>''|\"\")` +\n    /**/ \"|\" +\n    /**\n     * case 3: value without quotes\n     */\n    /**/ \"(?<valueWithoutQuotes>\\\\S+)\" +\n    `)` +\n    // optional space\n    `(?:\\\\s+|$)`,\n  \"g\",\n);\n\n/**\n * Parse attrs string to object\n *\n * @param attrs\n * @returns\n */\nexport const extractAttrs = <T extends { content: string }>(\n  data: T & { attrs?: AttrsInfo },\n): T & { attrs: AttrsInfo } => {\n  const attrs: AttrsInfo = {};\n\n  const content = data.content\n    .replace(\n      ATTR_REGEXP,\n      (\n        _,\n        _1,\n        _2,\n        _3,\n        _4,\n        _5,\n        _6,\n        _7,\n        {\n          attr,\n          emptyValue,\n          valueWithoutQuotes,\n          valueWithQuotes,\n          quote,\n        }: {\n          attr: string;\n          emptyValue: string | undefined;\n          valueWithoutQuotes: string | undefined;\n          valueWithQuotes: string | undefined;\n          quote: string | undefined;\n        },\n      ) => {\n        attrs[attr] = emptyValue\n          ? \"\"\n          : (valueWithoutQuotes ??\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            valueWithQuotes!.replace(new RegExp(`\\\\\\\\${quote}`, \"g\"), quote!));\n\n        return \"\";\n      },\n    )\n    .trim();\n\n  return { ...data, attrs, content };\n};\n\nexport const extractInfo = <T extends { content: string }>(\n  data: T & { attrs?: AttrsInfo; size?: string; color?: string },\n): T & { attrs: AttrsInfo; size?: string; color?: string } =>\n  extractColor(extractSize(extractAttrs(data)));\n\n/**\n * append styles to attrs object\n *\n * @param attrs Attrs object\n * @param styleDefinition new style definition\n * @returns updated attrs object\n */\nexport const appendStyle = (\n  attrs: Record<string, string>,\n  styleDefinition: string,\n): Record<string, string> => {\n  const { style = \"\" } = attrs;\n\n  attrs.style = `${style}${style && !style.endsWith(\";\") ? \";\" : \"\"}${styleDefinition}`;\n\n  return attrs;\n};\n\n/**\n * Stringify attrs object\n */\nexport const stringifyAttrs = (attrs: Record<string, string>): string => {\n  const result = Object.entries(attrs)\n    .map(([key, value]) => `${key}=\"${escapeHtml(value)}\"`)\n    .join(\" \");\n\n  return result ? ` ${result}` : \"\";\n};\n","import { appendStyle, extractInfo, stringifyAttrs } from \"./utils.js\";\n\n/**\n * Default render for icons\n */\nexport const defaultRender = (icon: string): string => {\n  const { attrs, content, size, color } = extractInfo({ content: icon });\n\n  if (size) appendStyle(attrs, `font-size:${size}`);\n  if (color) appendStyle(attrs, `color:${color}`);\n\n  return `\\\n<i icon=\"${content}\"${stringifyAttrs(attrs)}>\\\n</i>`;\n};\n\n/**\n * Render for [iconify-icon](https://iconify.design/docs/iconify-icon/)\n */\nexport const iconifyRender = (icon: string): string => {\n  const { attrs, content, size, color } = extractInfo({ content: icon });\n\n  if (size) appendStyle(attrs, `font-size:${size}`);\n  if (color) appendStyle(attrs, `color:${color}`);\n\n  return `<iconify-icon icon=\"${content}\"${stringifyAttrs(\n    attrs,\n  )}></iconify-icon>`;\n};\n\n/**\n * Fontawesome families short aliases\n */\nexport const FONTAWESOME_FAMILY_SHORT_ALIAS = [\n  // free\n  \"fas\",\n  \"fab\",\n\n  // part of pro\n  \"far\",\n\n  // pro only\n  \"fal\",\n  \"fat\",\n  \"fass\",\n  \"fasr\",\n];\n\n/**\n * Fontawesome styles short aliases\n */\nexport const FONTAWESOME_STYLES_SHORT_ALIAS = [\n  // pro only\n  \"fad\",\n  \"fass\",\n  \"fasr\",\n];\n\n/**\n * Fontawesome short aliases\n */\nexport const FONTAWESOME_SHORT_ALIAS = [\n  ...FONTAWESOME_FAMILY_SHORT_ALIAS,\n  ...FONTAWESOME_STYLES_SHORT_ALIAS,\n];\n\n/**\n * Fontawesome families classes\n */\nexport const FONTAWESOME_FAMILIES = [\n  ...FONTAWESOME_FAMILY_SHORT_ALIAS,\n  // free\n  \"fa-solid\",\n  \"fa-brands\",\n\n  // part of pro\n  \"fa-regular\",\n\n  // pro only\n  \"fa-light\",\n  \"fa-thin\",\n];\n\n/**\n * Fontawesome styles classes\n */\nexport const FONTAWESOME_STYLES = [\n  ...FONTAWESOME_STYLES_SHORT_ALIAS,\n  \"fa-duotone\",\n  \"fa-sharp\",\n  \"fa-sharp-duotone\",\n];\n\n/**\n * All fontawesome families and styles classes\n */\nexport const FONTAWESOME_FAMILIES_AND_STYLES = [\n  ...FONTAWESOME_FAMILIES,\n  ...FONTAWESOME_STYLES,\n];\n\n/**\n * Check if a class is a valid fontawesome short alias\n */\nexport const isFontawesomeShortAlias = (cls: string): boolean =>\n  FONTAWESOME_SHORT_ALIAS.includes(cls);\n\n/**\n * Check if a class is a valid fontawesome family\n */\nexport const isFontawesomeFamily = (cls: string): boolean =>\n  FONTAWESOME_FAMILIES.includes(cls);\n\n/**\n * Ensure every class is prefixed with `fa-` or a valid short alias\n */\nexport const appendFontawesomePrefix = (icon: string): string =>\n  icon.startsWith(\"fa-\") || isFontawesomeShortAlias(icon) ? icon : `fa-${icon}`;\n\n/**\n * Render for [fontawesome](https://fontawesome.com/) icons\n */\nexport const fontawesomeRender = (icon: string): string => {\n  const { attrs, content, size, color } = extractInfo({ content: icon });\n\n  if (size) appendStyle(attrs, `font-size:${size}`);\n  if (color) appendStyle(attrs, `color:${color}`);\n\n  const classes = content.split(/\\s+/);\n  const finalClasses: string[] = [];\n  const iconNameIndex = classes.findIndex((cls) => cls.includes(\":\"));\n\n  // a icon name with explicit family (possibly with style) not found\n  if (iconNameIndex === -1) {\n    finalClasses.push(...classes.map(appendFontawesomePrefix));\n\n    // if no family is specified, default to solid\n    if (finalClasses.every((cls) => !isFontawesomeFamily(cls))) {\n      finalClasses.push(\"fa-solid\");\n    }\n  } else {\n    // get explicit icon name and it's family\n    const [iconName] = classes.splice(iconNameIndex, 1);\n\n    const [type, name] = iconName.split(\":\", 2);\n\n    finalClasses.push(\n      type.length <= 2 ? `fa${type}` : appendFontawesomePrefix(type),\n      appendFontawesomePrefix(name),\n      ...classes.map(appendFontawesomePrefix),\n    );\n  }\n\n  return `\\\n<i class=\"${finalClasses.join(\" \")}\"${stringifyAttrs(attrs)}></i>\\\n`;\n};\n\n/**\n * Render for [iconfont](https://www.iconfont.cn/) icons\n */\nexport const iconfontRender = (icon: string): string => {\n  const { attrs, content, size, color } = extractInfo({ content: icon });\n\n  if (size) appendStyle(attrs, `font-size:${size}`);\n  if (color) appendStyle(attrs, `color:${color}`);\n\n  // add `iconfont` class and `icon-` prefix for first class\n  return `<span class=\"iconfont icon-${content}\"${stringifyAttrs(attrs)}></span>`;\n};\n"],"names":["iconRule","state","silent","found","max","start","next","info","icon","md","render","content","tokens","idx","_","env","a","SIZE_REGEXP","extractSize","data","size","match","COLOR_REGEXP","extractColor","color","ATTR_NAME_REGEXP","ATTR_REGEXP","extractAttrs","attrs","_1","_2","_3","_4","_5","_6","_7","attr","emptyValue","valueWithoutQuotes","valueWithQuotes","quote","extractInfo","appendStyle","styleDefinition","style","stringifyAttrs","result","key","value","escapeHtml","defaultRender","iconifyRender","FONTAWESOME_FAMILY_SHORT_ALIAS","FONTAWESOME_STYLES_SHORT_ALIAS","FONTAWESOME_SHORT_ALIAS","FONTAWESOME_FAMILIES","FONTAWESOME_STYLES","FONTAWESOME_FAMILIES_AND_STYLES","isFontawesomeShortAlias","cls","isFontawesomeFamily","appendFontawesomePrefix","fontawesomeRender","classes","finalClasses","iconNameIndex","iconName","type","name","iconfontRender"],"mappings":"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"}