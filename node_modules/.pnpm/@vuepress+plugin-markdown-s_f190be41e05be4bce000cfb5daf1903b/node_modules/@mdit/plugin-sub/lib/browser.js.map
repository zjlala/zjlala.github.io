{"version":3,"file":"browser.js","sources":["../../helper/lib/index.js","../src/plugin.ts"],"sourcesContent":["const l=e=>{const n=e.split(`\n`),p=n.reduce((r,c)=>{for(let t=0;t<c.length;t++)if(c[t]!==\" \"&&c[t]!==\"\t\")return Math.min(t,r);return r},1/0);return p<1/0?n.map(r=>r.slice(p)).join(`\n`):e},a=e=>e.replace(/&/gu,\"&amp;\").replace(/</gu,\"&lt;\").replace(/>/gu,\"&gt;\").replace(/\"/gu,\"&quot;\").replace(/'/gu,\"&#39;\"),g=e=>e.replace(/[-/\\\\^$*+?.()|[\\]{}]/g,\"\\\\$&\"),u=/\\r\\n?|\\n/g,s=/\\\\([ \\\\!\"#$%&'()*+,./:;<=>?@[\\]^_`{|}~-])/gu;export{u as NEWLINE_RE,s as UNESCAPE_RE,l as dedent,a as escapeHtml,g as escapeRegExp};\n//# sourceMappingURL=index.js.map\n","/**\n * Forked from https://github.com/markdown-it/markdown-it-sub/blob/master/index.mjs\n */\nimport { UNESCAPE_RE } from \"@mdit/helper\";\nimport type { PluginSimple } from \"markdown-it\";\nimport type { RuleInline } from \"markdown-it/lib/parser_inline.mjs\";\n\nconst subscriptRender: RuleInline = (state, silent) => {\n  const max = state.posMax;\n  const start = state.pos;\n\n  if (\n    state.src.charCodeAt(start) !== 126 /* ~ */ ||\n    // don’t run any pairs in validation mode\n    silent ||\n    start + 2 >= max\n  )\n    return false;\n\n  state.pos = start + 1;\n\n  let found = false;\n\n  while (state.pos < max) {\n    if (state.src.charCodeAt(state.pos) === 126 /* ~ */) {\n      found = true;\n      break;\n    }\n\n    state.md.inline.skipToken(state);\n  }\n\n  if (!found || start + 1 === state.pos) {\n    state.pos = start;\n\n    return false;\n  }\n\n  const content = state.src.slice(start + 1, state.pos);\n\n  // don’t allow unescaped spaces/newlines inside\n  if (/(^|[^\\\\])(\\\\\\\\)*\\s/u.exec(content)) {\n    state.pos = start;\n\n    return false;\n  }\n\n  // found!\n  state.posMax = state.pos;\n  state.pos = start + 1;\n\n  // Earlier we checked !silent, but this implementation does not need it\n  const openToken = state.push(\"sub_open\", \"sub\", 1);\n\n  openToken.markup = \"~\";\n\n  const textToken = state.push(\"text\", \"\", 0);\n\n  textToken.content = content.replace(UNESCAPE_RE, \"$1\");\n\n  const closeToken = state.push(\"sub_close\", \"sub\", -1);\n\n  closeToken.markup = \"~\";\n\n  state.pos = state.posMax + 1;\n  state.posMax = max;\n\n  return true;\n};\n\nexport const sub: PluginSimple = (md) => {\n  md.inline.ruler.after(\"emphasis\", \"sub\", subscriptRender);\n};\n"],"names":["s","subscriptRender","state","silent","max","start","found","content","openToken","textToken","UNESCAPE_RE","closeToken","sub","md"],"mappings":"AAAA,MAE4LA,EAAE,8CCKxLC,EAA8B,CAACC,EAAOC,IAAW,CACrD,MAAMC,EAAMF,EAAM,OACZG,EAAQH,EAAM,IAEpB,GACEA,EAAM,IAAI,WAAWG,CAAK,IAAM,KAEhCF,GACAE,EAAQ,GAAKD,EAEb,MAEFF,GAAAA,EAAM,IAAMG,EAAQ,EAEpB,IAAIC,EAAQ,GAEZ,KAAOJ,EAAM,IAAME,GAAK,CACtB,GAAIF,EAAM,IAAI,WAAWA,EAAM,GAAG,IAAM,IAAa,CACnDI,EAAQ,GACR,KACF,CAEAJ,EAAM,GAAG,OAAO,UAAUA,CAAK,CACjC,CAEA,GAAI,CAACI,GAASD,EAAQ,IAAMH,EAAM,IAChC,OAAAA,EAAM,IAAMG,EAEL,GAGT,MAAME,EAAUL,EAAM,IAAI,MAAMG,EAAQ,EAAGH,EAAM,GAAG,EAGpD,GAAI,sBAAsB,KAAKK,CAAO,EACpC,OAAAL,EAAM,IAAMG,EAEL,GAITH,EAAM,OAASA,EAAM,IACrBA,EAAM,IAAMG,EAAQ,EAGpB,MAAMG,EAAYN,EAAM,KAAK,WAAY,MAAO,CAAC,EAEjDM,EAAU,OAAS,IAEnB,MAAMC,EAAYP,EAAM,KAAK,OAAQ,GAAI,CAAC,EAE1CO,EAAU,QAAUF,EAAQ,QAAQG,EAAa,IAAI,EAErD,MAAMC,EAAaT,EAAM,KAAK,YAAa,MAAO,EAAE,EAEpD,OAAAS,EAAW,OAAS,IAEpBT,EAAM,IAAMA,EAAM,OAAS,EAC3BA,EAAM,OAASE,EAER,EACT,EAEaQ,EAAqBC,GAAO,CACvCA,EAAG,OAAO,MAAM,MAAM,WAAY,MAAOZ,CAAe,CAC1D"}