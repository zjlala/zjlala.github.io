{"version":3,"file":"useNavbarLanguageDropdown.js","sourceRoot":"","sources":["../../../../src/client/composables/navbar/useNavbarLanguageDropdown.ts"],"names":[],"mappings":"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","sourcesContent":["import { entries, keys, useRoutePaths } from \"@vuepress/helper/client\";\nimport type { ComputedRef } from \"vue\";\nimport { computed, onMounted, ref } from \"vue\";\nimport { useRoute } from \"vuepress/client\";\n\nimport { useData } from \"@theme-hope/composables/useData\";\n\nimport type { AutoLinkOptions, NavGroup } from \"../../../shared/index.js\";\n\n/**\n * Get navbar config of select language dropdown\n */\nexport const useNavbarLanguageDropdown =\n  (): ComputedRef<NavGroup<AutoLinkOptions> | null> => {\n    const { routeLocale, site, siteLocale, theme, themeLocale } = useData();\n    const routePaths = useRoutePaths();\n    const route = useRoute();\n    const isMounted = ref(false);\n\n    onMounted(() => {\n      isMounted.value = true;\n    });\n\n    return computed(() => {\n      const localePaths = keys(site.value.locales);\n      const extraLocales = entries(theme.value.extraLocales ?? {});\n\n      // Do not display language selection dropdown if there is only one language\n      if (localePaths.length < 2 && !extraLocales.length) return null;\n\n      const { path, fullPath } = route;\n      const { navbarLocales } = themeLocale.value;\n\n      const languageDropdown: NavGroup<AutoLinkOptions> = {\n        text: \"\",\n        ariaLabel: navbarLocales.selectLangAriaLabel,\n        children: [\n          ...localePaths.map((targetLocalePath) => {\n            // Target locale config of this language link\n            const targetSiteLocale = site.value.locales[targetLocalePath] ?? {};\n            const targetThemeLocale =\n              theme.value.locales[targetLocalePath] ?? {};\n            const targetLang = targetSiteLocale.lang;\n\n            const text = targetThemeLocale.navbarLocales.langName;\n            let link;\n\n            // If the target language is current language\n            if (targetLang === siteLocale.value.lang) {\n              // Stay at current link\n              link = fullPath;\n            }\n            // If the target language is not current language\n            else {\n              const targetLocalePage = path.replace(\n                routeLocale.value,\n                targetLocalePath,\n              );\n\n              // try to link to the corresponding page of current page\n              link = routePaths.value.some((item) => item === targetLocalePage)\n                ? isMounted.value\n                  ? // try to keep current hash and query across languages\n                    fullPath.replace(path, targetLocalePage)\n                  : // avoid ssr mismatch\n                    targetLocalePage\n                : // Or fallback to homepage\n                  (targetThemeLocale.home ?? targetLocalePath);\n            }\n\n            return {\n              text,\n              link,\n            };\n          }),\n          ...extraLocales.map(([text, path]) => ({\n            text,\n            link: path.replace(\n              \":route\",\n              (isMounted.value ? fullPath : path).replace(\n                routeLocale.value,\n                \"\",\n              ),\n            ),\n          })),\n        ],\n      };\n\n      return languageDropdown;\n    });\n  };\n"]}