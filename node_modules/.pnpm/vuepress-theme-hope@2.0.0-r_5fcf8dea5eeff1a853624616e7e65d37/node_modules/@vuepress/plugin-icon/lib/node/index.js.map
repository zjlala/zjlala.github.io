{"version":3,"file":"index.js","sources":["../../src/node/getAssetsType.ts","../../src/node/utils.ts","../../src/node/getIconLinks.ts","../../src/node/getIconPrefix.ts","../../src/node/prepareConfigFile.ts","../../src/node/iconPlugin.ts"],"sourcesContent":["import { isArray, isString } from '@vuepress/helper'\nimport type { IconType } from '../shared/index.js'\nimport type { IconAsset, IconPluginOptions } from './options.js'\n\nexport const isIconifyLink = (link: string): boolean =>\n  /\\/iconify-icon(?:[@/]|$)/.test(link)\n\nexport const isFontAwesomeLink = (link: string): boolean =>\n  /^(?:https:)?\\/\\/kit\\.fontawesome\\.com\\//.test(link) ||\n  /\\/fontawesome(?:[@/-]|$)/.test(link)\n\nconst isIconFontLink = (link: string): boolean =>\n  /^(?:https:)?\\/\\/at\\.alicdn\\.com\\/t\\//.test(link)\n\nexport const isFontAwesomeAssets = (assets: IconAsset): boolean =>\n  isArray(assets)\n    ? assets.every(isFontAwesomeLink)\n    : assets === 'fontawesome' ||\n      assets === 'fontawesome-with-brands' ||\n      isFontAwesomeLink(assets)\n\nexport const isIconFontAssets = (assets: IconAsset): boolean =>\n  isArray(assets) ? assets.every(isIconFontLink) : isIconFontLink(assets)\n\nexport const isIconifyAssets = (assets: IconAsset): boolean =>\n  isString(assets) && (isIconifyLink(assets) || assets === 'iconify')\n\nexport const getAssetsType = ({\n  assets = 'iconify',\n}: IconPluginOptions): IconType => {\n  if (isFontAwesomeAssets(assets)) return 'fontawesome'\n  if (isIconFontAssets(assets)) return 'iconfont'\n  if (isIconifyAssets(assets)) return 'iconify'\n\n  return 'unknown'\n}\n","import { Logger } from '@vuepress/helper'\n\nexport const PLUGIN_NAME = '@vuepress/plugin-icon'\n\nexport const logger = new Logger(PLUGIN_NAME)\n","import {\n  endsWith,\n  isArray,\n  isLinkAbsolute,\n  isLinkHttp,\n  isString,\n} from '@vuepress/helper'\nimport { isFontAwesomeLink } from './getAssetsType.js'\nimport type { IconAsset } from './options.js'\nimport { logger } from './utils.js'\n\nexport interface LinkInfo {\n  type: 'script' | 'style'\n  content: string\n}\n\nconst getFontAwesomeCDNLink = (type: string): string =>\n  `https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6/js/${type}.min.js`\n\nconst getFontAwesomeLink = (link: string): LinkInfo => ({\n  type: 'script',\n  content: `\\\nuseScriptTag(\n  \\`${link}\\`,\n  () => {},\n  { attrs: { \"data-auto-replace-svg\": \"nest\" } }\n);\n`,\n})\n\nconst getIconLink = (asset?: string): LinkInfo[] => {\n  if (isString(asset)) {\n    if (asset === 'fontawesome')\n      return ['solid', 'regular', 'fontawesome']\n        .map(getFontAwesomeCDNLink)\n        .map(getFontAwesomeLink)\n\n    if (asset === 'fontawesome-with-brands')\n      return ['all'].map(getFontAwesomeCDNLink).map(getFontAwesomeLink)\n\n    if (asset === 'iconify')\n      return [\n        {\n          type: 'script',\n          content: `\\\nuseScriptTag(\\`https://cdn.jsdelivr.net/npm/iconify-icon@2\\`);\\\n`,\n        },\n      ]\n\n    const actualLink = isLinkHttp(asset)\n      ? asset\n      : isLinkAbsolute(asset)\n        ? asset\n        : `//${asset}`\n\n    if (endsWith(actualLink, '.css'))\n      return [\n        {\n          type: 'style',\n          content: `\\\nuseStyleTag(\\`\\\\\n@import url(\"${actualLink}\");\n\\`);\\\n`,\n        },\n      ]\n\n    if (endsWith(actualLink, '.js')) {\n      if (isFontAwesomeLink(actualLink)) return [getFontAwesomeLink(actualLink)]\n\n      return [\n        {\n          type: 'script',\n          content: `\\\n          useScriptTag(\\`${actualLink}\\`);\\\n          `,\n        },\n      ]\n    }\n\n    logger.error(`Can not recognize icon link: \"${asset}\"`)\n  }\n\n  return []\n}\n\nexport const getIconLinks = (assets: IconAsset = 'iconify'): LinkInfo[] =>\n  (isArray(assets) ? assets : [assets]).map(getIconLink).flat()\n","import type { IconType } from '../shared/index.js'\n\nconst ICON_FONT_PREFIX = 'iconfont icon-'\n\n/**\n * Get icon prefix\n *\n * 获取图标前缀\n *\n * @param iconType - Icon type / 图标类型\n * @param prefix - Custom prefix / 自定义前缀\n * @returns Icon prefix / 图标前缀\n */\nexport const getIconPrefix = (iconType: IconType, prefix?: string): string =>\n  prefix ?? (iconType === 'iconfont' ? ICON_FONT_PREFIX : '')\n","import { ensureEndingSlash, getModulePath } from '@vuepress/helper'\nimport type { App } from 'vuepress/core'\nimport { getDirname, path } from 'vuepress/utils'\n\nimport type { IconType } from '../shared/index.js'\nimport { getIconLinks } from './getIconLinks.js'\nimport { getIconPrefix } from './getIconPrefix.js'\nimport type { IconPluginOptions } from './options.js'\n\nconst __dirname = getDirname(import.meta.url)\n\nexport const CLIENT_FOLDER = ensureEndingSlash(\n  path.resolve(__dirname, '../client'),\n)\n\nexport const prepareConfigFile = (\n  app: App,\n  { assets, prefix, component = 'VPIcon' }: IconPluginOptions,\n  iconType: IconType,\n): Promise<string> => {\n  const linksInfo = getIconLinks(assets)\n  const iconPrefix = getIconPrefix(iconType, prefix)\n\n  return app.writeTemp(\n    `icon/config.js`,\n    `\\\nimport { hasGlobalComponent } from \"${getModulePath(\n      '@vuepress/helper/client',\n      import.meta,\n    )}\";\n${\n  linksInfo.some(({ type }) => type === 'script')\n    ? `\\\nimport { useScriptTag } from \"${getModulePath('@vueuse/core/index.mjs', import.meta)}\";\n`\n    : ''\n}\\\n${\n  linksInfo.some(({ type }) => type === 'style')\n    ? `\\\nimport { useStyleTag } from \"${getModulePath('@vueuse/core/index.mjs', import.meta)}\";\n`\n    : ''\n}\\\nimport { h } from \"vue\";\nimport { VPIcon } from \"${CLIENT_FOLDER}index.js\"\n\nexport default {\n  enhance: ({ app }) => {\n${\n  component\n    ? `\\\n    if(!hasGlobalComponent(\"${component}\")) {\n      app.component(\n        \"${component}\",\n        (props) =>\n          h(VPIcon, {\n            type: \"${iconType}\",\n            prefix: \"${iconPrefix}\",\n            ...props,\n          })\n      )\n    }\n`\n    : ''\n}\\\n  },\n  setup: () => {\n${linksInfo.map(({ content }) => `    ${content}`).join('\\n')}\n  },\n}\n`,\n  )\n}\n","import { extractInfo, icon, stringifyAttrs } from '@mdit/plugin-icon'\nimport { addCustomElement, addViteSsrNoExternal } from '@vuepress/helper'\nimport type { Plugin } from 'vuepress/core'\n\nimport { getAssetsType } from './getAssetsType.js'\nimport type { IconPluginOptions } from './options.js'\nimport { prepareConfigFile } from './prepareConfigFile.js'\nimport { PLUGIN_NAME } from './utils.js'\n\n/**\n * Icon plugin\n *\n * 图标插件\n *\n * @param options - Plugin options / 插件选项\n * @returns VuePress plugin / VuePress 插件\n *\n * @example\n * ```ts\n * import { iconPlugin } from '@vuepress/plugin-icon'\n *\n * export default {\n *   plugins: [\n *     iconPlugin({\n *       assets: 'iconify',\n *       prefix: 'mdi:',\n *       component: 'VPIcon'\n *     })\n *   ]\n * }\n * ```\n */\nexport const iconPlugin = (options: IconPluginOptions = {}): Plugin => {\n  const iconType = options.type ?? getAssetsType(options)\n\n  return {\n    name: PLUGIN_NAME,\n\n    extendsBundlerOptions: (bundlerOptions, app): void => {\n      addViteSsrNoExternal(bundlerOptions, app, '@vuepress/helper')\n\n      if (iconType === 'iconify')\n        addCustomElement(bundlerOptions, app, 'iconify-icon')\n    },\n\n    extendsMarkdown: (md): void => {\n      if (options.markdown ?? true) {\n        md.use(icon, {\n          render: (raw) => {\n            const { attrs, content, color, size } = extractInfo({\n              content: raw,\n            })\n\n            if (color && !attrs.color) attrs.color = color\n            if (size && !attrs.size) attrs.size = size\n\n            return `<${options.component ?? 'VPIcon'} icon=\"${content}\"${stringifyAttrs(attrs)} />`\n          },\n        })\n      }\n    },\n\n    clientConfigFile: (app) => prepareConfigFile(app, options, iconType),\n  }\n}\n"],"names":["isIconifyLink","link","isFontAwesomeLink","isIconFontLink","isFontAwesomeAssets","assets","isArray","isIconFontAssets","isIconifyAssets","isString","getAssetsType","PLUGIN_NAME","logger","Logger","getFontAwesomeCDNLink","type","getFontAwesomeLink","getIconLink","asset","actualLink","isLinkHttp","isLinkAbsolute","endsWith","getIconLinks","ICON_FONT_PREFIX","getIconPrefix","iconType","prefix","__dirname","getDirname","CLIENT_FOLDER","ensureEndingSlash","path","prepareConfigFile","app","component","linksInfo","iconPrefix","getModulePath","content","iconPlugin","options","bundlerOptions","addViteSsrNoExternal","addCustomElement","md","icon","raw","attrs","color","size","extractInfo","stringifyAttrs"],"mappings":"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"}